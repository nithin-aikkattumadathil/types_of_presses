
TASK_Types_Of_Presses.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037a8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b10  08003868  08003868  00013868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005378  08005378  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08005378  08005378  00015378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005380  08005380  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005380  08005380  00015380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005384  08005384  00015384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005388  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004cc  2000001c  080053a4  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  080053a4  000204e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c066  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001de0  00000000  00000000  0002c0aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  0002de90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba0  00000000  00000000  0002eb28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014084  00000000  00000000  0002f6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec36  00000000  00000000  0004374c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007a9c4  00000000  00000000  00052382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ccd46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d6c  00000000  00000000  000ccd98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000001c 	.word	0x2000001c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003850 	.word	0x08003850

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000020 	.word	0x20000020
 8000104:	08003850 	.word	0x08003850

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <pwm_led>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void pwm_led(void)
    {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
    	for(int x=0; x<1000; x=x+1)
 80004ae:	2300      	movs	r3, #0
 80004b0:	607b      	str	r3, [r7, #4]
 80004b2:	e009      	b.n	80004c8 <pwm_led+0x20>
		{
		  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, x);
 80004b4:	4b12      	ldr	r3, [pc, #72]	; (8000500 <pwm_led+0x58>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	687a      	ldr	r2, [r7, #4]
 80004ba:	639a      	str	r2, [r3, #56]	; 0x38
		  HAL_Delay(2);
 80004bc:	2002      	movs	r0, #2
 80004be:	f000 fe31 	bl	8001124 <HAL_Delay>
    	for(int x=0; x<1000; x=x+1)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	3301      	adds	r3, #1
 80004c6:	607b      	str	r3, [r7, #4]
 80004c8:	687a      	ldr	r2, [r7, #4]
 80004ca:	23fa      	movs	r3, #250	; 0xfa
 80004cc:	009b      	lsls	r3, r3, #2
 80004ce:	429a      	cmp	r2, r3
 80004d0:	dbf0      	blt.n	80004b4 <pwm_led+0xc>
		}
		for(int x=1000; x>0; x=x-1)
 80004d2:	23fa      	movs	r3, #250	; 0xfa
 80004d4:	009b      	lsls	r3, r3, #2
 80004d6:	603b      	str	r3, [r7, #0]
 80004d8:	e009      	b.n	80004ee <pwm_led+0x46>
		{
		  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, x);
 80004da:	4b09      	ldr	r3, [pc, #36]	; (8000500 <pwm_led+0x58>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	683a      	ldr	r2, [r7, #0]
 80004e0:	639a      	str	r2, [r3, #56]	; 0x38
		  HAL_Delay(2);
 80004e2:	2002      	movs	r0, #2
 80004e4:	f000 fe1e 	bl	8001124 <HAL_Delay>
		for(int x=1000; x>0; x=x-1)
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	3b01      	subs	r3, #1
 80004ec:	603b      	str	r3, [r7, #0]
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	dcf2      	bgt.n	80004da <pwm_led+0x32>
		}
    }
 80004f4:	46c0      	nop			; (mov r8, r8)
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	46bd      	mov	sp, r7
 80004fa:	b002      	add	sp, #8
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	2000008c 	.word	0x2000008c

08000504 <toggle_led>:

void toggle_led(void)
    {
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
       for(int i=0; i<=2; i++)
 800050a:	2300      	movs	r3, #0
 800050c:	607b      	str	r3, [r7, #4]
 800050e:	e00d      	b.n	800052c <toggle_led+0x28>
	  {
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000510:	23a0      	movs	r3, #160	; 0xa0
 8000512:	05db      	lsls	r3, r3, #23
 8000514:	2120      	movs	r1, #32
 8000516:	0018      	movs	r0, r3
 8000518:	f001 f88c 	bl	8001634 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 800051c:	23fa      	movs	r3, #250	; 0xfa
 800051e:	005b      	lsls	r3, r3, #1
 8000520:	0018      	movs	r0, r3
 8000522:	f000 fdff 	bl	8001124 <HAL_Delay>
       for(int i=0; i<=2; i++)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	3301      	adds	r3, #1
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2b02      	cmp	r3, #2
 8000530:	ddee      	ble.n	8000510 <toggle_led+0xc>
	  }
    }
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	46c0      	nop			; (mov r8, r8)
 8000536:	46bd      	mov	sp, r7
 8000538:	b002      	add	sp, #8
 800053a:	bd80      	pop	{r7, pc}

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f000 fd80 	bl	8001044 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000544:	f000 f8d4 	bl	80006f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000548:	f000 f9fe 	bl	8000948 <MX_GPIO_Init>
  MX_TIM2_Init();
 800054c:	f000 f97c 	bl	8000848 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000550:	f000 f93a 	bl	80007c8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_GotoXY (0,0);
 8000554:	2100      	movs	r1, #0
 8000556:	2000      	movs	r0, #0
 8000558:	f000 fb26 	bl	8000ba8 <SSD1306_GotoXY>
  SSD1306_Puts ("PIXEL ", &Font_16x26, 1);
 800055c:	4954      	ldr	r1, [pc, #336]	; (80006b0 <main+0x174>)
 800055e:	4b55      	ldr	r3, [pc, #340]	; (80006b4 <main+0x178>)
 8000560:	2201      	movs	r2, #1
 8000562:	0018      	movs	r0, r3
 8000564:	f000 fbba 	bl	8000cdc <SSD1306_Puts>
  SSD1306_GotoXY (10, 30);
 8000568:	211e      	movs	r1, #30
 800056a:	200a      	movs	r0, #10
 800056c:	f000 fb1c 	bl	8000ba8 <SSD1306_GotoXY>
  SSD1306_Puts ("EXPERT ", &Font_16x26, 1);
 8000570:	494f      	ldr	r1, [pc, #316]	; (80006b0 <main+0x174>)
 8000572:	4b51      	ldr	r3, [pc, #324]	; (80006b8 <main+0x17c>)
 8000574:	2201      	movs	r2, #1
 8000576:	0018      	movs	r0, r3
 8000578:	f000 fbb0 	bl	8000cdc <SSD1306_Puts>
  SSD1306_UpdateScreen();
 800057c:	f000 fa58 	bl	8000a30 <SSD1306_UpdateScreen>
  HAL_Delay(1500);
 8000580:	4b4e      	ldr	r3, [pc, #312]	; (80006bc <main+0x180>)
 8000582:	0018      	movs	r0, r3
 8000584:	f000 fdce 	bl	8001124 <HAL_Delay>
  SSD1306_Clear ();
 8000588:	f000 fbce 	bl	8000d28 <SSD1306_Clear>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  /* USER CODE BEGIN 3 */
	  buttonState = HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 800058c:	2380      	movs	r3, #128	; 0x80
 800058e:	019b      	lsls	r3, r3, #6
 8000590:	4a4b      	ldr	r2, [pc, #300]	; (80006c0 <main+0x184>)
 8000592:	0019      	movs	r1, r3
 8000594:	0010      	movs	r0, r2
 8000596:	f001 f813 	bl	80015c0 <HAL_GPIO_ReadPin>
 800059a:	0003      	movs	r3, r0
 800059c:	001a      	movs	r2, r3
 800059e:	4b49      	ldr	r3, [pc, #292]	; (80006c4 <main+0x188>)
 80005a0:	701a      	strb	r2, [r3, #0]

	        if (buttonState != lastButtonState)
 80005a2:	4b48      	ldr	r3, [pc, #288]	; (80006c4 <main+0x188>)
 80005a4:	781a      	ldrb	r2, [r3, #0]
 80005a6:	4b48      	ldr	r3, [pc, #288]	; (80006c8 <main+0x18c>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	429a      	cmp	r2, r3
 80005ac:	d059      	beq.n	8000662 <main+0x126>
	        {
	            if (buttonState == GPIO_PIN_RESET) // Button pressed
 80005ae:	4b45      	ldr	r3, [pc, #276]	; (80006c4 <main+0x188>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d141      	bne.n	800063a <main+0xfe>
	            {
	                buttonPressTime = HAL_GetTick();
 80005b6:	f000 fdab 	bl	8001110 <HAL_GetTick>
 80005ba:	0002      	movs	r2, r0
 80005bc:	4b43      	ldr	r3, [pc, #268]	; (80006cc <main+0x190>)
 80005be:	601a      	str	r2, [r3, #0]

	                if (buttonPressTime - lastButtonPressTime <= 500) // Button pressed twice within 1 second
 80005c0:	4b42      	ldr	r3, [pc, #264]	; (80006cc <main+0x190>)
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	4b42      	ldr	r3, [pc, #264]	; (80006d0 <main+0x194>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	1ad2      	subs	r2, r2, r3
 80005ca:	23fa      	movs	r3, #250	; 0xfa
 80005cc:	005b      	lsls	r3, r3, #1
 80005ce:	429a      	cmp	r2, r3
 80005d0:	d820      	bhi.n	8000614 <main+0xd8>
	                {
	                	SSD1306_Clear ();
 80005d2:	f000 fba9 	bl	8000d28 <SSD1306_Clear>
						SSD1306_GotoXY (10,30);
 80005d6:	211e      	movs	r1, #30
 80005d8:	200a      	movs	r0, #10
 80005da:	f000 fae5 	bl	8000ba8 <SSD1306_GotoXY>
						SSD1306_Puts ("DOUBLE PRESS ", &Font_7x10, 1);
 80005de:	493d      	ldr	r1, [pc, #244]	; (80006d4 <main+0x198>)
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <main+0x19c>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	0018      	movs	r0, r3
 80005e6:	f000 fb79 	bl	8000cdc <SSD1306_Puts>
						SSD1306_UpdateScreen();
 80005ea:	f000 fa21 	bl	8000a30 <SSD1306_UpdateScreen>
	                	toggle_led();
 80005ee:	f7ff ff89 	bl	8000504 <toggle_led>
	                    HAL_Delay(500);
 80005f2:	23fa      	movs	r3, #250	; 0xfa
 80005f4:	005b      	lsls	r3, r3, #1
 80005f6:	0018      	movs	r0, r3
 80005f8:	f000 fd94 	bl	8001124 <HAL_Delay>
	                    buttonState = HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 80005fc:	2380      	movs	r3, #128	; 0x80
 80005fe:	019b      	lsls	r3, r3, #6
 8000600:	4a2f      	ldr	r2, [pc, #188]	; (80006c0 <main+0x184>)
 8000602:	0019      	movs	r1, r3
 8000604:	0010      	movs	r0, r2
 8000606:	f000 ffdb 	bl	80015c0 <HAL_GPIO_ReadPin>
 800060a:	0003      	movs	r3, r0
 800060c:	001a      	movs	r2, r3
 800060e:	4b2d      	ldr	r3, [pc, #180]	; (80006c4 <main+0x188>)
 8000610:	701a      	strb	r2, [r3, #0]
 8000612:	e01e      	b.n	8000652 <main+0x116>
	                }
	                else // Button pressed once
	                {
	                	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000614:	23a0      	movs	r3, #160	; 0xa0
 8000616:	05db      	lsls	r3, r3, #23
 8000618:	2120      	movs	r1, #32
 800061a:	0018      	movs	r0, r3
 800061c:	f001 f80a 	bl	8001634 <HAL_GPIO_TogglePin>
	                	SSD1306_GotoXY (10,30);
 8000620:	211e      	movs	r1, #30
 8000622:	200a      	movs	r0, #10
 8000624:	f000 fac0 	bl	8000ba8 <SSD1306_GotoXY>
						SSD1306_Puts ("SINGLE PRESS ", &Font_7x10, 1);
 8000628:	492a      	ldr	r1, [pc, #168]	; (80006d4 <main+0x198>)
 800062a:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <main+0x1a0>)
 800062c:	2201      	movs	r2, #1
 800062e:	0018      	movs	r0, r3
 8000630:	f000 fb54 	bl	8000cdc <SSD1306_Puts>
						SSD1306_UpdateScreen();
 8000634:	f000 f9fc 	bl	8000a30 <SSD1306_UpdateScreen>
 8000638:	e00b      	b.n	8000652 <main+0x116>
	                }
	            }
	            else // Button released
	            {
	                if (HAL_GetTick() - buttonPressTime >= 3000) // Button held down for 3 seconds
 800063a:	f000 fd69 	bl	8001110 <HAL_GetTick>
 800063e:	0002      	movs	r2, r0
 8000640:	4b22      	ldr	r3, [pc, #136]	; (80006cc <main+0x190>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	1ad3      	subs	r3, r2, r3
 8000646:	4a26      	ldr	r2, [pc, #152]	; (80006e0 <main+0x1a4>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d902      	bls.n	8000652 <main+0x116>
	                {
	                    flag = 1;
 800064c:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <main+0x1a8>)
 800064e:	2201      	movs	r2, #1
 8000650:	601a      	str	r2, [r3, #0]
	                }
	            }

	            lastButtonState = buttonState;
 8000652:	4b1c      	ldr	r3, [pc, #112]	; (80006c4 <main+0x188>)
 8000654:	781a      	ldrb	r2, [r3, #0]
 8000656:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <main+0x18c>)
 8000658:	701a      	strb	r2, [r3, #0]
	            lastButtonPressTime = buttonPressTime;
 800065a:	4b1c      	ldr	r3, [pc, #112]	; (80006cc <main+0x190>)
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	4b1c      	ldr	r3, [pc, #112]	; (80006d0 <main+0x194>)
 8000660:	601a      	str	r2, [r3, #0]
	        }

	        if (flag == 1 && buttonState == GPIO_PIN_RESET && HAL_GetTick() - buttonPressTime >= 3000)
 8000662:	4b20      	ldr	r3, [pc, #128]	; (80006e4 <main+0x1a8>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2b01      	cmp	r3, #1
 8000668:	d190      	bne.n	800058c <main+0x50>
 800066a:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <main+0x188>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d18c      	bne.n	800058c <main+0x50>
 8000672:	f000 fd4d 	bl	8001110 <HAL_GetTick>
 8000676:	0002      	movs	r2, r0
 8000678:	4b14      	ldr	r3, [pc, #80]	; (80006cc <main+0x190>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	1ad3      	subs	r3, r2, r3
 800067e:	4a18      	ldr	r2, [pc, #96]	; (80006e0 <main+0x1a4>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d983      	bls.n	800058c <main+0x50>
	        {
	        	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000684:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <main+0x1ac>)
 8000686:	2104      	movs	r1, #4
 8000688:	0018      	movs	r0, r3
 800068a:	f002 fc21 	bl	8002ed0 <HAL_TIM_PWM_Start>
	        	SSD1306_Clear ();
 800068e:	f000 fb4b 	bl	8000d28 <SSD1306_Clear>
				SSD1306_GotoXY (10,30);
 8000692:	211e      	movs	r1, #30
 8000694:	200a      	movs	r0, #10
 8000696:	f000 fa87 	bl	8000ba8 <SSD1306_GotoXY>
				SSD1306_Puts ("LONG PRESS ", &Font_7x10, 1);
 800069a:	490e      	ldr	r1, [pc, #56]	; (80006d4 <main+0x198>)
 800069c:	4b13      	ldr	r3, [pc, #76]	; (80006ec <main+0x1b0>)
 800069e:	2201      	movs	r2, #1
 80006a0:	0018      	movs	r0, r3
 80006a2:	f000 fb1b 	bl	8000cdc <SSD1306_Puts>
				SSD1306_UpdateScreen();
 80006a6:	f000 f9c3 	bl	8000a30 <SSD1306_UpdateScreen>
	        	pwm_led();
 80006aa:	f7ff fefd 	bl	80004a8 <pwm_led>
	  buttonState = HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 80006ae:	e76d      	b.n	800058c <main+0x50>
 80006b0:	20000008 	.word	0x20000008
 80006b4:	08003868 	.word	0x08003868
 80006b8:	08003870 	.word	0x08003870
 80006bc:	000005dc 	.word	0x000005dc
 80006c0:	50000800 	.word	0x50000800
 80006c4:	200000cc 	.word	0x200000cc
 80006c8:	200000cd 	.word	0x200000cd
 80006cc:	200000d0 	.word	0x200000d0
 80006d0:	200000d4 	.word	0x200000d4
 80006d4:	20000000 	.word	0x20000000
 80006d8:	08003878 	.word	0x08003878
 80006dc:	08003888 	.word	0x08003888
 80006e0:	00000bb7 	.word	0x00000bb7
 80006e4:	200000d8 	.word	0x200000d8
 80006e8:	2000008c 	.word	0x2000008c
 80006ec:	08003898 	.word	0x08003898

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b590      	push	{r4, r7, lr}
 80006f2:	b09d      	sub	sp, #116	; 0x74
 80006f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	2438      	movs	r4, #56	; 0x38
 80006f8:	193b      	adds	r3, r7, r4
 80006fa:	0018      	movs	r0, r3
 80006fc:	2338      	movs	r3, #56	; 0x38
 80006fe:	001a      	movs	r2, r3
 8000700:	2100      	movs	r1, #0
 8000702:	f003 f89d 	bl	8003840 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000706:	2324      	movs	r3, #36	; 0x24
 8000708:	18fb      	adds	r3, r7, r3
 800070a:	0018      	movs	r0, r3
 800070c:	2314      	movs	r3, #20
 800070e:	001a      	movs	r2, r3
 8000710:	2100      	movs	r1, #0
 8000712:	f003 f895 	bl	8003840 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000716:	003b      	movs	r3, r7
 8000718:	0018      	movs	r0, r3
 800071a:	2324      	movs	r3, #36	; 0x24
 800071c:	001a      	movs	r2, r3
 800071e:	2100      	movs	r1, #0
 8000720:	f003 f88e 	bl	8003840 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000724:	4b26      	ldr	r3, [pc, #152]	; (80007c0 <SystemClock_Config+0xd0>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a26      	ldr	r2, [pc, #152]	; (80007c4 <SystemClock_Config+0xd4>)
 800072a:	401a      	ands	r2, r3
 800072c:	4b24      	ldr	r3, [pc, #144]	; (80007c0 <SystemClock_Config+0xd0>)
 800072e:	2180      	movs	r1, #128	; 0x80
 8000730:	0109      	lsls	r1, r1, #4
 8000732:	430a      	orrs	r2, r1
 8000734:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000736:	0021      	movs	r1, r4
 8000738:	187b      	adds	r3, r7, r1
 800073a:	2210      	movs	r2, #16
 800073c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800073e:	187b      	adds	r3, r7, r1
 8000740:	2201      	movs	r2, #1
 8000742:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000744:	187b      	adds	r3, r7, r1
 8000746:	2200      	movs	r2, #0
 8000748:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800074a:	187b      	adds	r3, r7, r1
 800074c:	22a0      	movs	r2, #160	; 0xa0
 800074e:	0212      	lsls	r2, r2, #8
 8000750:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000752:	187b      	adds	r3, r7, r1
 8000754:	2200      	movs	r2, #0
 8000756:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000758:	187b      	adds	r3, r7, r1
 800075a:	0018      	movs	r0, r3
 800075c:	f001 fbf0 	bl	8001f40 <HAL_RCC_OscConfig>
 8000760:	1e03      	subs	r3, r0, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000764:	f000 f95e 	bl	8000a24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000768:	2124      	movs	r1, #36	; 0x24
 800076a:	187b      	adds	r3, r7, r1
 800076c:	220f      	movs	r2, #15
 800076e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000770:	187b      	adds	r3, r7, r1
 8000772:	2200      	movs	r2, #0
 8000774:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000776:	187b      	adds	r3, r7, r1
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800077c:	187b      	adds	r3, r7, r1
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000782:	187b      	adds	r3, r7, r1
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000788:	187b      	adds	r3, r7, r1
 800078a:	2100      	movs	r1, #0
 800078c:	0018      	movs	r0, r3
 800078e:	f001 ff9b 	bl	80026c8 <HAL_RCC_ClockConfig>
 8000792:	1e03      	subs	r3, r0, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000796:	f000 f945 	bl	8000a24 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800079a:	003b      	movs	r3, r7
 800079c:	2208      	movs	r2, #8
 800079e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007a0:	003b      	movs	r3, r7
 80007a2:	2200      	movs	r2, #0
 80007a4:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007a6:	003b      	movs	r3, r7
 80007a8:	0018      	movs	r0, r3
 80007aa:	f002 f97b 	bl	8002aa4 <HAL_RCCEx_PeriphCLKConfig>
 80007ae:	1e03      	subs	r3, r0, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007b2:	f000 f937 	bl	8000a24 <Error_Handler>
  }
}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	46bd      	mov	sp, r7
 80007ba:	b01d      	add	sp, #116	; 0x74
 80007bc:	bd90      	pop	{r4, r7, pc}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	40007000 	.word	0x40007000
 80007c4:	ffffe7ff 	.word	0xffffe7ff

080007c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007cc:	4b1c      	ldr	r3, [pc, #112]	; (8000840 <MX_I2C1_Init+0x78>)
 80007ce:	4a1d      	ldr	r2, [pc, #116]	; (8000844 <MX_I2C1_Init+0x7c>)
 80007d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 80007d2:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <MX_I2C1_Init+0x78>)
 80007d4:	22e1      	movs	r2, #225	; 0xe1
 80007d6:	00d2      	lsls	r2, r2, #3
 80007d8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007da:	4b19      	ldr	r3, [pc, #100]	; (8000840 <MX_I2C1_Init+0x78>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007e0:	4b17      	ldr	r3, [pc, #92]	; (8000840 <MX_I2C1_Init+0x78>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e6:	4b16      	ldr	r3, [pc, #88]	; (8000840 <MX_I2C1_Init+0x78>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007ec:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_I2C1_Init+0x78>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007f2:	4b13      	ldr	r3, [pc, #76]	; (8000840 <MX_I2C1_Init+0x78>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f8:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_I2C1_Init+0x78>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007fe:	4b10      	ldr	r3, [pc, #64]	; (8000840 <MX_I2C1_Init+0x78>)
 8000800:	2200      	movs	r2, #0
 8000802:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000804:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_I2C1_Init+0x78>)
 8000806:	0018      	movs	r0, r3
 8000808:	f000 ff30 	bl	800166c <HAL_I2C_Init>
 800080c:	1e03      	subs	r3, r0, #0
 800080e:	d001      	beq.n	8000814 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000810:	f000 f908 	bl	8000a24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000814:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <MX_I2C1_Init+0x78>)
 8000816:	2100      	movs	r1, #0
 8000818:	0018      	movs	r0, r3
 800081a:	f001 faf9 	bl	8001e10 <HAL_I2CEx_ConfigAnalogFilter>
 800081e:	1e03      	subs	r3, r0, #0
 8000820:	d001      	beq.n	8000826 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000822:	f000 f8ff 	bl	8000a24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <MX_I2C1_Init+0x78>)
 8000828:	2100      	movs	r1, #0
 800082a:	0018      	movs	r0, r3
 800082c:	f001 fb3c 	bl	8001ea8 <HAL_I2CEx_ConfigDigitalFilter>
 8000830:	1e03      	subs	r3, r0, #0
 8000832:	d001      	beq.n	8000838 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000834:	f000 f8f6 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000838:	46c0      	nop			; (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	20000038 	.word	0x20000038
 8000844:	40005400 	.word	0x40005400

08000848 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800084e:	2318      	movs	r3, #24
 8000850:	18fb      	adds	r3, r7, r3
 8000852:	0018      	movs	r0, r3
 8000854:	2310      	movs	r3, #16
 8000856:	001a      	movs	r2, r3
 8000858:	2100      	movs	r1, #0
 800085a:	f002 fff1 	bl	8003840 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800085e:	2310      	movs	r3, #16
 8000860:	18fb      	adds	r3, r7, r3
 8000862:	0018      	movs	r0, r3
 8000864:	2308      	movs	r3, #8
 8000866:	001a      	movs	r2, r3
 8000868:	2100      	movs	r1, #0
 800086a:	f002 ffe9 	bl	8003840 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800086e:	003b      	movs	r3, r7
 8000870:	0018      	movs	r0, r3
 8000872:	2310      	movs	r3, #16
 8000874:	001a      	movs	r2, r3
 8000876:	2100      	movs	r1, #0
 8000878:	f002 ffe2 	bl	8003840 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800087c:	4b30      	ldr	r3, [pc, #192]	; (8000940 <MX_TIM2_Init+0xf8>)
 800087e:	2280      	movs	r2, #128	; 0x80
 8000880:	05d2      	lsls	r2, r2, #23
 8000882:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 8000884:	4b2e      	ldr	r3, [pc, #184]	; (8000940 <MX_TIM2_Init+0xf8>)
 8000886:	227f      	movs	r2, #127	; 0x7f
 8000888:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088a:	4b2d      	ldr	r3, [pc, #180]	; (8000940 <MX_TIM2_Init+0xf8>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 625;
 8000890:	4b2b      	ldr	r3, [pc, #172]	; (8000940 <MX_TIM2_Init+0xf8>)
 8000892:	4a2c      	ldr	r2, [pc, #176]	; (8000944 <MX_TIM2_Init+0xfc>)
 8000894:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000896:	4b2a      	ldr	r3, [pc, #168]	; (8000940 <MX_TIM2_Init+0xf8>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800089c:	4b28      	ldr	r3, [pc, #160]	; (8000940 <MX_TIM2_Init+0xf8>)
 800089e:	2200      	movs	r2, #0
 80008a0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008a2:	4b27      	ldr	r3, [pc, #156]	; (8000940 <MX_TIM2_Init+0xf8>)
 80008a4:	0018      	movs	r0, r3
 80008a6:	f002 fa8b 	bl	8002dc0 <HAL_TIM_Base_Init>
 80008aa:	1e03      	subs	r3, r0, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80008ae:	f000 f8b9 	bl	8000a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b2:	2118      	movs	r1, #24
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	2280      	movs	r2, #128	; 0x80
 80008b8:	0152      	lsls	r2, r2, #5
 80008ba:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008bc:	187a      	adds	r2, r7, r1
 80008be:	4b20      	ldr	r3, [pc, #128]	; (8000940 <MX_TIM2_Init+0xf8>)
 80008c0:	0011      	movs	r1, r2
 80008c2:	0018      	movs	r0, r3
 80008c4:	f002 fc56 	bl	8003174 <HAL_TIM_ConfigClockSource>
 80008c8:	1e03      	subs	r3, r0, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80008cc:	f000 f8aa 	bl	8000a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008d0:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <MX_TIM2_Init+0xf8>)
 80008d2:	0018      	movs	r0, r3
 80008d4:	f002 fab4 	bl	8002e40 <HAL_TIM_PWM_Init>
 80008d8:	1e03      	subs	r3, r0, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80008dc:	f000 f8a2 	bl	8000a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e0:	2110      	movs	r1, #16
 80008e2:	187b      	adds	r3, r7, r1
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	2200      	movs	r2, #0
 80008ec:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008ee:	187a      	adds	r2, r7, r1
 80008f0:	4b13      	ldr	r3, [pc, #76]	; (8000940 <MX_TIM2_Init+0xf8>)
 80008f2:	0011      	movs	r1, r2
 80008f4:	0018      	movs	r0, r3
 80008f6:	f002 ff27 	bl	8003748 <HAL_TIMEx_MasterConfigSynchronization>
 80008fa:	1e03      	subs	r3, r0, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80008fe:	f000 f891 	bl	8000a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000902:	003b      	movs	r3, r7
 8000904:	2260      	movs	r2, #96	; 0x60
 8000906:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000908:	003b      	movs	r3, r7
 800090a:	2200      	movs	r2, #0
 800090c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800090e:	003b      	movs	r3, r7
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000914:	003b      	movs	r3, r7
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800091a:	0039      	movs	r1, r7
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <MX_TIM2_Init+0xf8>)
 800091e:	2204      	movs	r2, #4
 8000920:	0018      	movs	r0, r3
 8000922:	f002 fb61 	bl	8002fe8 <HAL_TIM_PWM_ConfigChannel>
 8000926:	1e03      	subs	r3, r0, #0
 8000928:	d001      	beq.n	800092e <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 800092a:	f000 f87b 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800092e:	4b04      	ldr	r3, [pc, #16]	; (8000940 <MX_TIM2_Init+0xf8>)
 8000930:	0018      	movs	r0, r3
 8000932:	f000 fb05 	bl	8000f40 <HAL_TIM_MspPostInit>

}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	46bd      	mov	sp, r7
 800093a:	b00a      	add	sp, #40	; 0x28
 800093c:	bd80      	pop	{r7, pc}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	2000008c 	.word	0x2000008c
 8000944:	00000271 	.word	0x00000271

08000948 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000948:	b590      	push	{r4, r7, lr}
 800094a:	b08b      	sub	sp, #44	; 0x2c
 800094c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094e:	2414      	movs	r4, #20
 8000950:	193b      	adds	r3, r7, r4
 8000952:	0018      	movs	r0, r3
 8000954:	2314      	movs	r3, #20
 8000956:	001a      	movs	r2, r3
 8000958:	2100      	movs	r1, #0
 800095a:	f002 ff71 	bl	8003840 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095e:	4b2f      	ldr	r3, [pc, #188]	; (8000a1c <MX_GPIO_Init+0xd4>)
 8000960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000962:	4b2e      	ldr	r3, [pc, #184]	; (8000a1c <MX_GPIO_Init+0xd4>)
 8000964:	2104      	movs	r1, #4
 8000966:	430a      	orrs	r2, r1
 8000968:	62da      	str	r2, [r3, #44]	; 0x2c
 800096a:	4b2c      	ldr	r3, [pc, #176]	; (8000a1c <MX_GPIO_Init+0xd4>)
 800096c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800096e:	2204      	movs	r2, #4
 8000970:	4013      	ands	r3, r2
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000976:	4b29      	ldr	r3, [pc, #164]	; (8000a1c <MX_GPIO_Init+0xd4>)
 8000978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800097a:	4b28      	ldr	r3, [pc, #160]	; (8000a1c <MX_GPIO_Init+0xd4>)
 800097c:	2180      	movs	r1, #128	; 0x80
 800097e:	430a      	orrs	r2, r1
 8000980:	62da      	str	r2, [r3, #44]	; 0x2c
 8000982:	4b26      	ldr	r3, [pc, #152]	; (8000a1c <MX_GPIO_Init+0xd4>)
 8000984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000986:	2280      	movs	r2, #128	; 0x80
 8000988:	4013      	ands	r3, r2
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	4b23      	ldr	r3, [pc, #140]	; (8000a1c <MX_GPIO_Init+0xd4>)
 8000990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000992:	4b22      	ldr	r3, [pc, #136]	; (8000a1c <MX_GPIO_Init+0xd4>)
 8000994:	2101      	movs	r1, #1
 8000996:	430a      	orrs	r2, r1
 8000998:	62da      	str	r2, [r3, #44]	; 0x2c
 800099a:	4b20      	ldr	r3, [pc, #128]	; (8000a1c <MX_GPIO_Init+0xd4>)
 800099c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800099e:	2201      	movs	r2, #1
 80009a0:	4013      	ands	r3, r2
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a6:	4b1d      	ldr	r3, [pc, #116]	; (8000a1c <MX_GPIO_Init+0xd4>)
 80009a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009aa:	4b1c      	ldr	r3, [pc, #112]	; (8000a1c <MX_GPIO_Init+0xd4>)
 80009ac:	2102      	movs	r1, #2
 80009ae:	430a      	orrs	r2, r1
 80009b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80009b2:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <MX_GPIO_Init+0xd4>)
 80009b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009b6:	2202      	movs	r2, #2
 80009b8:	4013      	ands	r3, r2
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80009be:	23a0      	movs	r3, #160	; 0xa0
 80009c0:	05db      	lsls	r3, r3, #23
 80009c2:	2200      	movs	r2, #0
 80009c4:	2120      	movs	r1, #32
 80009c6:	0018      	movs	r0, r3
 80009c8:	f000 fe17 	bl	80015fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009cc:	193b      	adds	r3, r7, r4
 80009ce:	2280      	movs	r2, #128	; 0x80
 80009d0:	0192      	lsls	r2, r2, #6
 80009d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d4:	193b      	adds	r3, r7, r4
 80009d6:	2200      	movs	r2, #0
 80009d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	193b      	adds	r3, r7, r4
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e0:	193b      	adds	r3, r7, r4
 80009e2:	4a0f      	ldr	r2, [pc, #60]	; (8000a20 <MX_GPIO_Init+0xd8>)
 80009e4:	0019      	movs	r1, r3
 80009e6:	0010      	movs	r0, r2
 80009e8:	f000 fc74 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80009ec:	0021      	movs	r1, r4
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	2220      	movs	r2, #32
 80009f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	2201      	movs	r2, #1
 80009f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a06:	187a      	adds	r2, r7, r1
 8000a08:	23a0      	movs	r3, #160	; 0xa0
 8000a0a:	05db      	lsls	r3, r3, #23
 8000a0c:	0011      	movs	r1, r2
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f000 fc60 	bl	80012d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a14:	46c0      	nop			; (mov r8, r8)
 8000a16:	46bd      	mov	sp, r7
 8000a18:	b00b      	add	sp, #44	; 0x2c
 8000a1a:	bd90      	pop	{r4, r7, pc}
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	50000800 	.word	0x50000800

08000a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a28:	b672      	cpsid	i
}
 8000a2a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <Error_Handler+0x8>
	...

08000a30 <SSD1306_UpdateScreen>:

	/* Return OK */
	return 1;
}

void SSD1306_UpdateScreen(void) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000a36:	1dfb      	adds	r3, r7, #7
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
 8000a3c:	e021      	b.n	8000a82 <SSD1306_UpdateScreen+0x52>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000a3e:	1dfb      	adds	r3, r7, #7
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	3b50      	subs	r3, #80	; 0x50
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	001a      	movs	r2, r3
 8000a48:	2100      	movs	r1, #0
 8000a4a:	2078      	movs	r0, #120	; 0x78
 8000a4c:	f000 f9e2 	bl	8000e14 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2100      	movs	r1, #0
 8000a54:	2078      	movs	r0, #120	; 0x78
 8000a56:	f000 f9dd 	bl	8000e14 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000a5a:	2210      	movs	r2, #16
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	2078      	movs	r0, #120	; 0x78
 8000a60:	f000 f9d8 	bl	8000e14 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000a64:	1dfb      	adds	r3, r7, #7
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	01da      	lsls	r2, r3, #7
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <SSD1306_UpdateScreen+0x64>)
 8000a6c:	18d2      	adds	r2, r2, r3
 8000a6e:	2380      	movs	r3, #128	; 0x80
 8000a70:	2140      	movs	r1, #64	; 0x40
 8000a72:	2078      	movs	r0, #120	; 0x78
 8000a74:	f000 f962 	bl	8000d3c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000a78:	1dfb      	adds	r3, r7, #7
 8000a7a:	781a      	ldrb	r2, [r3, #0]
 8000a7c:	1dfb      	adds	r3, r7, #7
 8000a7e:	3201      	adds	r2, #1
 8000a80:	701a      	strb	r2, [r3, #0]
 8000a82:	1dfb      	adds	r3, r7, #7
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	2b07      	cmp	r3, #7
 8000a88:	d9d9      	bls.n	8000a3e <SSD1306_UpdateScreen+0xe>
	}
}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	46c0      	nop			; (mov r8, r8)
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	b002      	add	sp, #8
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	200000dc 	.word	0x200000dc

08000a98 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	0002      	movs	r2, r0
 8000aa0:	1dfb      	adds	r3, r7, #7
 8000aa2:	701a      	strb	r2, [r3, #0]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000aa4:	1dfb      	adds	r3, r7, #7
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d101      	bne.n	8000ab0 <SSD1306_Fill+0x18>
 8000aac:	2300      	movs	r3, #0
 8000aae:	e000      	b.n	8000ab2 <SSD1306_Fill+0x1a>
 8000ab0:	23ff      	movs	r3, #255	; 0xff
 8000ab2:	2280      	movs	r2, #128	; 0x80
 8000ab4:	00d2      	lsls	r2, r2, #3
 8000ab6:	4804      	ldr	r0, [pc, #16]	; (8000ac8 <SSD1306_Fill+0x30>)
 8000ab8:	0019      	movs	r1, r3
 8000aba:	f002 fec1 	bl	8003840 <memset>
}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	b002      	add	sp, #8
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	200000dc 	.word	0x200000dc

08000acc <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	0004      	movs	r4, r0
 8000ad4:	0008      	movs	r0, r1
 8000ad6:	0011      	movs	r1, r2
 8000ad8:	1dbb      	adds	r3, r7, #6
 8000ada:	1c22      	adds	r2, r4, #0
 8000adc:	801a      	strh	r2, [r3, #0]
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	1c02      	adds	r2, r0, #0
 8000ae2:	801a      	strh	r2, [r3, #0]
 8000ae4:	1cfb      	adds	r3, r7, #3
 8000ae6:	1c0a      	adds	r2, r1, #0
 8000ae8:	701a      	strb	r2, [r3, #0]
	if (
 8000aea:	1dbb      	adds	r3, r7, #6
 8000aec:	881b      	ldrh	r3, [r3, #0]
 8000aee:	2b7f      	cmp	r3, #127	; 0x7f
 8000af0:	d852      	bhi.n	8000b98 <SSD1306_DrawPixel+0xcc>
		x >= SSD1306_WIDTH ||
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	881b      	ldrh	r3, [r3, #0]
 8000af6:	2b3f      	cmp	r3, #63	; 0x3f
 8000af8:	d84e      	bhi.n	8000b98 <SSD1306_DrawPixel+0xcc>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000afa:	4b29      	ldr	r3, [pc, #164]	; (8000ba0 <SSD1306_DrawPixel+0xd4>)
 8000afc:	791b      	ldrb	r3, [r3, #4]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d006      	beq.n	8000b10 <SSD1306_DrawPixel+0x44>
		color = (SSD1306_COLOR_t)!color;
 8000b02:	1cfb      	adds	r3, r7, #3
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	425a      	negs	r2, r3
 8000b08:	4153      	adcs	r3, r2
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	1cfb      	adds	r3, r7, #3
 8000b0e:	701a      	strb	r2, [r3, #0]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000b10:	1cfb      	adds	r3, r7, #3
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d11e      	bne.n	8000b56 <SSD1306_DrawPixel+0x8a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000b18:	1dbb      	adds	r3, r7, #6
 8000b1a:	881a      	ldrh	r2, [r3, #0]
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	881b      	ldrh	r3, [r3, #0]
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	b298      	uxth	r0, r3
 8000b24:	0003      	movs	r3, r0
 8000b26:	01db      	lsls	r3, r3, #7
 8000b28:	18d3      	adds	r3, r2, r3
 8000b2a:	4a1e      	ldr	r2, [pc, #120]	; (8000ba4 <SSD1306_DrawPixel+0xd8>)
 8000b2c:	5cd3      	ldrb	r3, [r2, r3]
 8000b2e:	b25a      	sxtb	r2, r3
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	881b      	ldrh	r3, [r3, #0]
 8000b34:	2107      	movs	r1, #7
 8000b36:	400b      	ands	r3, r1
 8000b38:	2101      	movs	r1, #1
 8000b3a:	4099      	lsls	r1, r3
 8000b3c:	000b      	movs	r3, r1
 8000b3e:	b25b      	sxtb	r3, r3
 8000b40:	4313      	orrs	r3, r2
 8000b42:	b259      	sxtb	r1, r3
 8000b44:	1dbb      	adds	r3, r7, #6
 8000b46:	881a      	ldrh	r2, [r3, #0]
 8000b48:	0003      	movs	r3, r0
 8000b4a:	01db      	lsls	r3, r3, #7
 8000b4c:	18d3      	adds	r3, r2, r3
 8000b4e:	b2c9      	uxtb	r1, r1
 8000b50:	4a14      	ldr	r2, [pc, #80]	; (8000ba4 <SSD1306_DrawPixel+0xd8>)
 8000b52:	54d1      	strb	r1, [r2, r3]
 8000b54:	e021      	b.n	8000b9a <SSD1306_DrawPixel+0xce>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000b56:	1dbb      	adds	r3, r7, #6
 8000b58:	881a      	ldrh	r2, [r3, #0]
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	881b      	ldrh	r3, [r3, #0]
 8000b5e:	08db      	lsrs	r3, r3, #3
 8000b60:	b298      	uxth	r0, r3
 8000b62:	0003      	movs	r3, r0
 8000b64:	01db      	lsls	r3, r3, #7
 8000b66:	18d3      	adds	r3, r2, r3
 8000b68:	4a0e      	ldr	r2, [pc, #56]	; (8000ba4 <SSD1306_DrawPixel+0xd8>)
 8000b6a:	5cd3      	ldrb	r3, [r2, r3]
 8000b6c:	b25b      	sxtb	r3, r3
 8000b6e:	1d3a      	adds	r2, r7, #4
 8000b70:	8812      	ldrh	r2, [r2, #0]
 8000b72:	2107      	movs	r1, #7
 8000b74:	400a      	ands	r2, r1
 8000b76:	2101      	movs	r1, #1
 8000b78:	4091      	lsls	r1, r2
 8000b7a:	000a      	movs	r2, r1
 8000b7c:	b252      	sxtb	r2, r2
 8000b7e:	43d2      	mvns	r2, r2
 8000b80:	b252      	sxtb	r2, r2
 8000b82:	4013      	ands	r3, r2
 8000b84:	b259      	sxtb	r1, r3
 8000b86:	1dbb      	adds	r3, r7, #6
 8000b88:	881a      	ldrh	r2, [r3, #0]
 8000b8a:	0003      	movs	r3, r0
 8000b8c:	01db      	lsls	r3, r3, #7
 8000b8e:	18d3      	adds	r3, r2, r3
 8000b90:	b2c9      	uxtb	r1, r1
 8000b92:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <SSD1306_DrawPixel+0xd8>)
 8000b94:	54d1      	strb	r1, [r2, r3]
 8000b96:	e000      	b.n	8000b9a <SSD1306_DrawPixel+0xce>
		return;
 8000b98:	46c0      	nop			; (mov r8, r8)
	}
}
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	b003      	add	sp, #12
 8000b9e:	bd90      	pop	{r4, r7, pc}
 8000ba0:	200004dc 	.word	0x200004dc
 8000ba4:	200000dc 	.word	0x200000dc

08000ba8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	0002      	movs	r2, r0
 8000bb0:	1dbb      	adds	r3, r7, #6
 8000bb2:	801a      	strh	r2, [r3, #0]
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	1c0a      	adds	r2, r1, #0
 8000bb8:	801a      	strh	r2, [r3, #0]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <SSD1306_GotoXY+0x2c>)
 8000bbc:	1dba      	adds	r2, r7, #6
 8000bbe:	8812      	ldrh	r2, [r2, #0]
 8000bc0:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8000bc2:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <SSD1306_GotoXY+0x2c>)
 8000bc4:	1d3a      	adds	r2, r7, #4
 8000bc6:	8812      	ldrh	r2, [r2, #0]
 8000bc8:	805a      	strh	r2, [r3, #2]
}
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	b002      	add	sp, #8
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	200004dc 	.word	0x200004dc

08000bd8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6039      	str	r1, [r7, #0]
 8000be0:	0011      	movs	r1, r2
 8000be2:	1dfb      	adds	r3, r7, #7
 8000be4:	1c02      	adds	r2, r0, #0
 8000be6:	701a      	strb	r2, [r3, #0]
 8000be8:	1dbb      	adds	r3, r7, #6
 8000bea:	1c0a      	adds	r2, r1, #0
 8000bec:	701a      	strb	r2, [r3, #0]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000bee:	4b3a      	ldr	r3, [pc, #232]	; (8000cd8 <SSD1306_Putc+0x100>)
 8000bf0:	881b      	ldrh	r3, [r3, #0]
 8000bf2:	001a      	movs	r2, r3
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	18d3      	adds	r3, r2, r3
	if (
 8000bfa:	2b7f      	cmp	r3, #127	; 0x7f
 8000bfc:	dc07      	bgt.n	8000c0e <SSD1306_Putc+0x36>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000bfe:	4b36      	ldr	r3, [pc, #216]	; (8000cd8 <SSD1306_Putc+0x100>)
 8000c00:	885b      	ldrh	r3, [r3, #2]
 8000c02:	001a      	movs	r2, r3
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	785b      	ldrb	r3, [r3, #1]
 8000c08:	18d3      	adds	r3, r2, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000c0a:	2b3f      	cmp	r3, #63	; 0x3f
 8000c0c:	dd01      	ble.n	8000c12 <SSD1306_Putc+0x3a>
	) {
		/* Error */
		return 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	e05e      	b.n	8000cd0 <SSD1306_Putc+0xf8>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
 8000c16:	e04a      	b.n	8000cae <SSD1306_Putc+0xd6>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685a      	ldr	r2, [r3, #4]
 8000c1c:	1dfb      	adds	r3, r7, #7
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	3b20      	subs	r3, #32
 8000c22:	6839      	ldr	r1, [r7, #0]
 8000c24:	7849      	ldrb	r1, [r1, #1]
 8000c26:	434b      	muls	r3, r1
 8000c28:	0019      	movs	r1, r3
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	18cb      	adds	r3, r1, r3
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	18d3      	adds	r3, r2, r3
 8000c32:	881b      	ldrh	r3, [r3, #0]
 8000c34:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	e02f      	b.n	8000c9c <SSD1306_Putc+0xc4>
			if ((b << j) & 0x8000) {
 8000c3c:	68fa      	ldr	r2, [r7, #12]
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	409a      	lsls	r2, r3
 8000c42:	2380      	movs	r3, #128	; 0x80
 8000c44:	021b      	lsls	r3, r3, #8
 8000c46:	4013      	ands	r3, r2
 8000c48:	d011      	beq.n	8000c6e <SSD1306_Putc+0x96>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000c4a:	4b23      	ldr	r3, [pc, #140]	; (8000cd8 <SSD1306_Putc+0x100>)
 8000c4c:	881a      	ldrh	r2, [r3, #0]
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	18d3      	adds	r3, r2, r3
 8000c54:	b298      	uxth	r0, r3
 8000c56:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <SSD1306_Putc+0x100>)
 8000c58:	885a      	ldrh	r2, [r3, #2]
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	18d3      	adds	r3, r2, r3
 8000c60:	b299      	uxth	r1, r3
 8000c62:	1dbb      	adds	r3, r7, #6
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	001a      	movs	r2, r3
 8000c68:	f7ff ff30 	bl	8000acc <SSD1306_DrawPixel>
 8000c6c:	e013      	b.n	8000c96 <SSD1306_Putc+0xbe>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000c6e:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <SSD1306_Putc+0x100>)
 8000c70:	881a      	ldrh	r2, [r3, #0]
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	18d3      	adds	r3, r2, r3
 8000c78:	b298      	uxth	r0, r3
 8000c7a:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <SSD1306_Putc+0x100>)
 8000c7c:	885a      	ldrh	r2, [r3, #2]
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	18d3      	adds	r3, r2, r3
 8000c84:	b299      	uxth	r1, r3
 8000c86:	1dbb      	adds	r3, r7, #6
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	425a      	negs	r2, r3
 8000c8c:	4153      	adcs	r3, r2
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	001a      	movs	r2, r3
 8000c92:	f7ff ff1b 	bl	8000acc <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	001a      	movs	r2, r3
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d3c9      	bcc.n	8000c3c <SSD1306_Putc+0x64>
	for (i = 0; i < Font->FontHeight; i++) {
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	3301      	adds	r3, #1
 8000cac:	617b      	str	r3, [r7, #20]
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	785b      	ldrb	r3, [r3, #1]
 8000cb2:	001a      	movs	r2, r3
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d3ae      	bcc.n	8000c18 <SSD1306_Putc+0x40>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000cba:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <SSD1306_Putc+0x100>)
 8000cbc:	881a      	ldrh	r2, [r3, #0]
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	18d3      	adds	r3, r2, r3
 8000cc6:	b29a      	uxth	r2, r3
 8000cc8:	4b03      	ldr	r3, [pc, #12]	; (8000cd8 <SSD1306_Putc+0x100>)
 8000cca:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8000ccc:	1dfb      	adds	r3, r7, #7
 8000cce:	781b      	ldrb	r3, [r3, #0]
}
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	b006      	add	sp, #24
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	200004dc 	.word	0x200004dc

08000cdc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	1dfb      	adds	r3, r7, #7
 8000ce8:	701a      	strb	r2, [r3, #0]
	/* Write characters */
	while (*str) {
 8000cea:	e013      	b.n	8000d14 <SSD1306_Puts+0x38>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	7818      	ldrb	r0, [r3, #0]
 8000cf0:	1dfb      	adds	r3, r7, #7
 8000cf2:	781a      	ldrb	r2, [r3, #0]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	0019      	movs	r1, r3
 8000cf8:	f7ff ff6e 	bl	8000bd8 <SSD1306_Putc>
 8000cfc:	0003      	movs	r3, r0
 8000cfe:	001a      	movs	r2, r3
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d002      	beq.n	8000d0e <SSD1306_Puts+0x32>
			/* Return error */
			return *str;
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	e008      	b.n	8000d20 <SSD1306_Puts+0x44>
		}

		/* Increase string pointer */
		str++;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	3301      	adds	r3, #1
 8000d12:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d1e7      	bne.n	8000cec <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	781b      	ldrb	r3, [r3, #0]
}
 8000d20:	0018      	movs	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	b004      	add	sp, #16
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f7ff feb3 	bl	8000a98 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000d32:	f7ff fe7d 	bl	8000a30 <SSD1306_UpdateScreen>
}
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000d3c:	b5b0      	push	{r4, r5, r7, lr}
 8000d3e:	b0c6      	sub	sp, #280	; 0x118
 8000d40:	af02      	add	r7, sp, #8
 8000d42:	0004      	movs	r4, r0
 8000d44:	0008      	movs	r0, r1
 8000d46:	603a      	str	r2, [r7, #0]
 8000d48:	0019      	movs	r1, r3
 8000d4a:	4b2d      	ldr	r3, [pc, #180]	; (8000e00 <ssd1306_I2C_WriteMulti+0xc4>)
 8000d4c:	2588      	movs	r5, #136	; 0x88
 8000d4e:	006d      	lsls	r5, r5, #1
 8000d50:	195b      	adds	r3, r3, r5
 8000d52:	19db      	adds	r3, r3, r7
 8000d54:	1c22      	adds	r2, r4, #0
 8000d56:	701a      	strb	r2, [r3, #0]
 8000d58:	4b2a      	ldr	r3, [pc, #168]	; (8000e04 <ssd1306_I2C_WriteMulti+0xc8>)
 8000d5a:	002c      	movs	r4, r5
 8000d5c:	191b      	adds	r3, r3, r4
 8000d5e:	19db      	adds	r3, r3, r7
 8000d60:	1c02      	adds	r2, r0, #0
 8000d62:	701a      	strb	r2, [r3, #0]
 8000d64:	4b28      	ldr	r3, [pc, #160]	; (8000e08 <ssd1306_I2C_WriteMulti+0xcc>)
 8000d66:	0020      	movs	r0, r4
 8000d68:	181b      	adds	r3, r3, r0
 8000d6a:	19db      	adds	r3, r3, r7
 8000d6c:	1c0a      	adds	r2, r1, #0
 8000d6e:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000d70:	4b26      	ldr	r3, [pc, #152]	; (8000e0c <ssd1306_I2C_WriteMulti+0xd0>)
 8000d72:	181b      	adds	r3, r3, r0
 8000d74:	19db      	adds	r3, r3, r7
 8000d76:	4a23      	ldr	r2, [pc, #140]	; (8000e04 <ssd1306_I2C_WriteMulti+0xc8>)
 8000d78:	1812      	adds	r2, r2, r0
 8000d7a:	19d2      	adds	r2, r2, r7
 8000d7c:	7812      	ldrb	r2, [r2, #0]
 8000d7e:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000d80:	2310      	movs	r3, #16
 8000d82:	33ff      	adds	r3, #255	; 0xff
 8000d84:	18fb      	adds	r3, r7, r3
 8000d86:	2200      	movs	r2, #0
 8000d88:	701a      	strb	r2, [r3, #0]
 8000d8a:	e014      	b.n	8000db6 <ssd1306_I2C_WriteMulti+0x7a>
dt[i+1] = data[i];
 8000d8c:	2010      	movs	r0, #16
 8000d8e:	30ff      	adds	r0, #255	; 0xff
 8000d90:	183b      	adds	r3, r7, r0
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	683a      	ldr	r2, [r7, #0]
 8000d96:	18d2      	adds	r2, r2, r3
 8000d98:	183b      	adds	r3, r7, r0
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	7811      	ldrb	r1, [r2, #0]
 8000da0:	4a1a      	ldr	r2, [pc, #104]	; (8000e0c <ssd1306_I2C_WriteMulti+0xd0>)
 8000da2:	2488      	movs	r4, #136	; 0x88
 8000da4:	0064      	lsls	r4, r4, #1
 8000da6:	1912      	adds	r2, r2, r4
 8000da8:	19d2      	adds	r2, r2, r7
 8000daa:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000dac:	183b      	adds	r3, r7, r0
 8000dae:	781a      	ldrb	r2, [r3, #0]
 8000db0:	183b      	adds	r3, r7, r0
 8000db2:	3201      	adds	r2, #1
 8000db4:	701a      	strb	r2, [r3, #0]
 8000db6:	2310      	movs	r3, #16
 8000db8:	33ff      	adds	r3, #255	; 0xff
 8000dba:	18fb      	adds	r3, r7, r3
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	4a11      	ldr	r2, [pc, #68]	; (8000e08 <ssd1306_I2C_WriteMulti+0xcc>)
 8000dc2:	2188      	movs	r1, #136	; 0x88
 8000dc4:	0049      	lsls	r1, r1, #1
 8000dc6:	1852      	adds	r2, r2, r1
 8000dc8:	19d2      	adds	r2, r2, r7
 8000dca:	8812      	ldrh	r2, [r2, #0]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d8dd      	bhi.n	8000d8c <ssd1306_I2C_WriteMulti+0x50>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <ssd1306_I2C_WriteMulti+0xc4>)
 8000dd2:	000a      	movs	r2, r1
 8000dd4:	189b      	adds	r3, r3, r2
 8000dd6:	19db      	adds	r3, r3, r7
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	b299      	uxth	r1, r3
 8000ddc:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <ssd1306_I2C_WriteMulti+0xcc>)
 8000dde:	189b      	adds	r3, r3, r2
 8000de0:	19db      	adds	r3, r3, r7
 8000de2:	881b      	ldrh	r3, [r3, #0]
 8000de4:	3301      	adds	r3, #1
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	220c      	movs	r2, #12
 8000dea:	18ba      	adds	r2, r7, r2
 8000dec:	4808      	ldr	r0, [pc, #32]	; (8000e10 <ssd1306_I2C_WriteMulti+0xd4>)
 8000dee:	240a      	movs	r4, #10
 8000df0:	9400      	str	r4, [sp, #0]
 8000df2:	f000 fcd1 	bl	8001798 <HAL_I2C_Master_Transmit>
}
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	b044      	add	sp, #272	; 0x110
 8000dfc:	bdb0      	pop	{r4, r5, r7, pc}
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	fffffef7 	.word	0xfffffef7
 8000e04:	fffffef6 	.word	0xfffffef6
 8000e08:	fffffef4 	.word	0xfffffef4
 8000e0c:	fffffefc 	.word	0xfffffefc
 8000e10:	20000038 	.word	0x20000038

08000e14 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000e14:	b590      	push	{r4, r7, lr}
 8000e16:	b087      	sub	sp, #28
 8000e18:	af02      	add	r7, sp, #8
 8000e1a:	0004      	movs	r4, r0
 8000e1c:	0008      	movs	r0, r1
 8000e1e:	0011      	movs	r1, r2
 8000e20:	1dfb      	adds	r3, r7, #7
 8000e22:	1c22      	adds	r2, r4, #0
 8000e24:	701a      	strb	r2, [r3, #0]
 8000e26:	1dbb      	adds	r3, r7, #6
 8000e28:	1c02      	adds	r2, r0, #0
 8000e2a:	701a      	strb	r2, [r3, #0]
 8000e2c:	1d7b      	adds	r3, r7, #5
 8000e2e:	1c0a      	adds	r2, r1, #0
 8000e30:	701a      	strb	r2, [r3, #0]
	uint8_t dt[2];
	dt[0] = reg;
 8000e32:	200c      	movs	r0, #12
 8000e34:	183b      	adds	r3, r7, r0
 8000e36:	1dba      	adds	r2, r7, #6
 8000e38:	7812      	ldrb	r2, [r2, #0]
 8000e3a:	701a      	strb	r2, [r3, #0]
	dt[1] = data;
 8000e3c:	183b      	adds	r3, r7, r0
 8000e3e:	1d7a      	adds	r2, r7, #5
 8000e40:	7812      	ldrb	r2, [r2, #0]
 8000e42:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000e44:	1dfb      	adds	r3, r7, #7
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	b299      	uxth	r1, r3
 8000e4a:	183a      	adds	r2, r7, r0
 8000e4c:	4804      	ldr	r0, [pc, #16]	; (8000e60 <ssd1306_I2C_Write+0x4c>)
 8000e4e:	230a      	movs	r3, #10
 8000e50:	9300      	str	r3, [sp, #0]
 8000e52:	2302      	movs	r3, #2
 8000e54:	f000 fca0 	bl	8001798 <HAL_I2C_Master_Transmit>
}
 8000e58:	46c0      	nop			; (mov r8, r8)
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	b005      	add	sp, #20
 8000e5e:	bd90      	pop	{r4, r7, pc}
 8000e60:	20000038 	.word	0x20000038

08000e64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e68:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <HAL_MspInit+0x24>)
 8000e6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_MspInit+0x24>)
 8000e6e:	2101      	movs	r1, #1
 8000e70:	430a      	orrs	r2, r1
 8000e72:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e74:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <HAL_MspInit+0x24>)
 8000e76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e78:	4b03      	ldr	r3, [pc, #12]	; (8000e88 <HAL_MspInit+0x24>)
 8000e7a:	2180      	movs	r1, #128	; 0x80
 8000e7c:	0549      	lsls	r1, r1, #21
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40021000 	.word	0x40021000

08000e8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e8c:	b590      	push	{r4, r7, lr}
 8000e8e:	b089      	sub	sp, #36	; 0x24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	240c      	movs	r4, #12
 8000e96:	193b      	adds	r3, r7, r4
 8000e98:	0018      	movs	r0, r3
 8000e9a:	2314      	movs	r3, #20
 8000e9c:	001a      	movs	r2, r3
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	f002 fcce 	bl	8003840 <memset>
  if(hi2c->Instance==I2C1)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a17      	ldr	r2, [pc, #92]	; (8000f08 <HAL_I2C_MspInit+0x7c>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d128      	bne.n	8000f00 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eae:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <HAL_I2C_MspInit+0x80>)
 8000eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000eb2:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <HAL_I2C_MspInit+0x80>)
 8000eb4:	2102      	movs	r1, #2
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000eba:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <HAL_I2C_MspInit+0x80>)
 8000ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ec6:	0021      	movs	r1, r4
 8000ec8:	187b      	adds	r3, r7, r1
 8000eca:	22c0      	movs	r2, #192	; 0xc0
 8000ecc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ece:	187b      	adds	r3, r7, r1
 8000ed0:	2212      	movs	r2, #18
 8000ed2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	187b      	adds	r3, r7, r1
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eda:	187b      	adds	r3, r7, r1
 8000edc:	2203      	movs	r2, #3
 8000ede:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee6:	187b      	adds	r3, r7, r1
 8000ee8:	4a09      	ldr	r2, [pc, #36]	; (8000f10 <HAL_I2C_MspInit+0x84>)
 8000eea:	0019      	movs	r1, r3
 8000eec:	0010      	movs	r0, r2
 8000eee:	f000 f9f1 	bl	80012d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_I2C_MspInit+0x80>)
 8000ef4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ef6:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <HAL_I2C_MspInit+0x80>)
 8000ef8:	2180      	movs	r1, #128	; 0x80
 8000efa:	0389      	lsls	r1, r1, #14
 8000efc:	430a      	orrs	r2, r1
 8000efe:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f00:	46c0      	nop			; (mov r8, r8)
 8000f02:	46bd      	mov	sp, r7
 8000f04:	b009      	add	sp, #36	; 0x24
 8000f06:	bd90      	pop	{r4, r7, pc}
 8000f08:	40005400 	.word	0x40005400
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	50000400 	.word	0x50000400

08000f14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	2380      	movs	r3, #128	; 0x80
 8000f22:	05db      	lsls	r3, r3, #23
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d105      	bne.n	8000f34 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f28:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <HAL_TIM_Base_MspInit+0x28>)
 8000f2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f2c:	4b03      	ldr	r3, [pc, #12]	; (8000f3c <HAL_TIM_Base_MspInit+0x28>)
 8000f2e:	2101      	movs	r1, #1
 8000f30:	430a      	orrs	r2, r1
 8000f32:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f34:	46c0      	nop			; (mov r8, r8)
 8000f36:	46bd      	mov	sp, r7
 8000f38:	b002      	add	sp, #8
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40021000 	.word	0x40021000

08000f40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f40:	b590      	push	{r4, r7, lr}
 8000f42:	b089      	sub	sp, #36	; 0x24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	240c      	movs	r4, #12
 8000f4a:	193b      	adds	r3, r7, r4
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	2314      	movs	r3, #20
 8000f50:	001a      	movs	r2, r3
 8000f52:	2100      	movs	r1, #0
 8000f54:	f002 fc74 	bl	8003840 <memset>
  if(htim->Instance==TIM2)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	2380      	movs	r3, #128	; 0x80
 8000f5e:	05db      	lsls	r3, r3, #23
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d122      	bne.n	8000faa <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f64:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <HAL_TIM_MspPostInit+0x74>)
 8000f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <HAL_TIM_MspPostInit+0x74>)
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f70:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <HAL_TIM_MspPostInit+0x74>)
 8000f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f74:	2201      	movs	r2, #1
 8000f76:	4013      	ands	r3, r2
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f7c:	0021      	movs	r1, r4
 8000f7e:	187b      	adds	r3, r7, r1
 8000f80:	2202      	movs	r2, #2
 8000f82:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	187b      	adds	r3, r7, r1
 8000f86:	2202      	movs	r2, #2
 8000f88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	187b      	adds	r3, r7, r1
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	187b      	adds	r3, r7, r1
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000f96:	187b      	adds	r3, r7, r1
 8000f98:	2202      	movs	r2, #2
 8000f9a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9c:	187a      	adds	r2, r7, r1
 8000f9e:	23a0      	movs	r3, #160	; 0xa0
 8000fa0:	05db      	lsls	r3, r3, #23
 8000fa2:	0011      	movs	r1, r2
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	f000 f995 	bl	80012d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	46bd      	mov	sp, r7
 8000fae:	b009      	add	sp, #36	; 0x24
 8000fb0:	bd90      	pop	{r4, r7, pc}
 8000fb2:	46c0      	nop			; (mov r8, r8)
 8000fb4:	40021000 	.word	0x40021000

08000fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <NMI_Handler+0x4>

08000fbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <HardFault_Handler+0x4>

08000fc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000fc8:	46c0      	nop			; (mov r8, r8)
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fdc:	f000 f886 	bl	80010ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe0:	46c0      	nop			; (mov r8, r8)
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000ff0:	480d      	ldr	r0, [pc, #52]	; (8001028 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ff2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ff4:	f7ff fff7 	bl	8000fe6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ff8:	480c      	ldr	r0, [pc, #48]	; (800102c <LoopForever+0x6>)
  ldr r1, =_edata
 8000ffa:	490d      	ldr	r1, [pc, #52]	; (8001030 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ffc:	4a0d      	ldr	r2, [pc, #52]	; (8001034 <LoopForever+0xe>)
  movs r3, #0
 8000ffe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001000:	e002      	b.n	8001008 <LoopCopyDataInit>

08001002 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001002:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001004:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001006:	3304      	adds	r3, #4

08001008 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001008:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800100a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800100c:	d3f9      	bcc.n	8001002 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100e:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001010:	4c0a      	ldr	r4, [pc, #40]	; (800103c <LoopForever+0x16>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001014:	e001      	b.n	800101a <LoopFillZerobss>

08001016 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001016:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001018:	3204      	adds	r2, #4

0800101a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800101a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800101c:	d3fb      	bcc.n	8001016 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800101e:	f002 fbeb 	bl	80037f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001022:	f7ff fa8b 	bl	800053c <main>

08001026 <LoopForever>:

LoopForever:
    b LoopForever
 8001026:	e7fe      	b.n	8001026 <LoopForever>
  ldr   r0, =_estack
 8001028:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800102c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001030:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001034:	08005388 	.word	0x08005388
  ldr r2, =_sbss
 8001038:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 800103c:	200004e8 	.word	0x200004e8

08001040 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001040:	e7fe      	b.n	8001040 <ADC1_COMP_IRQHandler>
	...

08001044 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800104a:	1dfb      	adds	r3, r7, #7
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001050:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <HAL_Init+0x3c>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <HAL_Init+0x3c>)
 8001056:	2140      	movs	r1, #64	; 0x40
 8001058:	430a      	orrs	r2, r1
 800105a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800105c:	2003      	movs	r0, #3
 800105e:	f000 f811 	bl	8001084 <HAL_InitTick>
 8001062:	1e03      	subs	r3, r0, #0
 8001064:	d003      	beq.n	800106e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001066:	1dfb      	adds	r3, r7, #7
 8001068:	2201      	movs	r2, #1
 800106a:	701a      	strb	r2, [r3, #0]
 800106c:	e001      	b.n	8001072 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800106e:	f7ff fef9 	bl	8000e64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001072:	1dfb      	adds	r3, r7, #7
 8001074:	781b      	ldrb	r3, [r3, #0]
}
 8001076:	0018      	movs	r0, r3
 8001078:	46bd      	mov	sp, r7
 800107a:	b002      	add	sp, #8
 800107c:	bd80      	pop	{r7, pc}
 800107e:	46c0      	nop			; (mov r8, r8)
 8001080:	40022000 	.word	0x40022000

08001084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001084:	b590      	push	{r4, r7, lr}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800108c:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <HAL_InitTick+0x5c>)
 800108e:	681c      	ldr	r4, [r3, #0]
 8001090:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <HAL_InitTick+0x60>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	0019      	movs	r1, r3
 8001096:	23fa      	movs	r3, #250	; 0xfa
 8001098:	0098      	lsls	r0, r3, #2
 800109a:	f7ff f835 	bl	8000108 <__udivsi3>
 800109e:	0003      	movs	r3, r0
 80010a0:	0019      	movs	r1, r3
 80010a2:	0020      	movs	r0, r4
 80010a4:	f7ff f830 	bl	8000108 <__udivsi3>
 80010a8:	0003      	movs	r3, r0
 80010aa:	0018      	movs	r0, r3
 80010ac:	f000 f905 	bl	80012ba <HAL_SYSTICK_Config>
 80010b0:	1e03      	subs	r3, r0, #0
 80010b2:	d001      	beq.n	80010b8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e00f      	b.n	80010d8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b03      	cmp	r3, #3
 80010bc:	d80b      	bhi.n	80010d6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010be:	6879      	ldr	r1, [r7, #4]
 80010c0:	2301      	movs	r3, #1
 80010c2:	425b      	negs	r3, r3
 80010c4:	2200      	movs	r2, #0
 80010c6:	0018      	movs	r0, r3
 80010c8:	f000 f8e2 	bl	8001290 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <HAL_InitTick+0x64>)
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010d2:	2300      	movs	r3, #0
 80010d4:	e000      	b.n	80010d8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
}
 80010d8:	0018      	movs	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	b003      	add	sp, #12
 80010de:	bd90      	pop	{r4, r7, pc}
 80010e0:	20000010 	.word	0x20000010
 80010e4:	20000018 	.word	0x20000018
 80010e8:	20000014 	.word	0x20000014

080010ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <HAL_IncTick+0x1c>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	001a      	movs	r2, r3
 80010f6:	4b05      	ldr	r3, [pc, #20]	; (800110c <HAL_IncTick+0x20>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	18d2      	adds	r2, r2, r3
 80010fc:	4b03      	ldr	r3, [pc, #12]	; (800110c <HAL_IncTick+0x20>)
 80010fe:	601a      	str	r2, [r3, #0]
}
 8001100:	46c0      	nop			; (mov r8, r8)
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	20000018 	.word	0x20000018
 800110c:	200004e4 	.word	0x200004e4

08001110 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  return uwTick;
 8001114:	4b02      	ldr	r3, [pc, #8]	; (8001120 <HAL_GetTick+0x10>)
 8001116:	681b      	ldr	r3, [r3, #0]
}
 8001118:	0018      	movs	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	46c0      	nop			; (mov r8, r8)
 8001120:	200004e4 	.word	0x200004e4

08001124 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800112c:	f7ff fff0 	bl	8001110 <HAL_GetTick>
 8001130:	0003      	movs	r3, r0
 8001132:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	3301      	adds	r3, #1
 800113c:	d005      	beq.n	800114a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800113e:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <HAL_Delay+0x44>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	001a      	movs	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	189b      	adds	r3, r3, r2
 8001148:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	f7ff ffe0 	bl	8001110 <HAL_GetTick>
 8001150:	0002      	movs	r2, r0
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	429a      	cmp	r2, r3
 800115a:	d8f7      	bhi.n	800114c <HAL_Delay+0x28>
  {
  }
}
 800115c:	46c0      	nop			; (mov r8, r8)
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	46bd      	mov	sp, r7
 8001162:	b004      	add	sp, #16
 8001164:	bd80      	pop	{r7, pc}
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	20000018 	.word	0x20000018

0800116c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800116c:	b590      	push	{r4, r7, lr}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	0002      	movs	r2, r0
 8001174:	6039      	str	r1, [r7, #0]
 8001176:	1dfb      	adds	r3, r7, #7
 8001178:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800117a:	1dfb      	adds	r3, r7, #7
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b7f      	cmp	r3, #127	; 0x7f
 8001180:	d828      	bhi.n	80011d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001182:	4a2f      	ldr	r2, [pc, #188]	; (8001240 <__NVIC_SetPriority+0xd4>)
 8001184:	1dfb      	adds	r3, r7, #7
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	b25b      	sxtb	r3, r3
 800118a:	089b      	lsrs	r3, r3, #2
 800118c:	33c0      	adds	r3, #192	; 0xc0
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	589b      	ldr	r3, [r3, r2]
 8001192:	1dfa      	adds	r2, r7, #7
 8001194:	7812      	ldrb	r2, [r2, #0]
 8001196:	0011      	movs	r1, r2
 8001198:	2203      	movs	r2, #3
 800119a:	400a      	ands	r2, r1
 800119c:	00d2      	lsls	r2, r2, #3
 800119e:	21ff      	movs	r1, #255	; 0xff
 80011a0:	4091      	lsls	r1, r2
 80011a2:	000a      	movs	r2, r1
 80011a4:	43d2      	mvns	r2, r2
 80011a6:	401a      	ands	r2, r3
 80011a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	019b      	lsls	r3, r3, #6
 80011ae:	22ff      	movs	r2, #255	; 0xff
 80011b0:	401a      	ands	r2, r3
 80011b2:	1dfb      	adds	r3, r7, #7
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	0018      	movs	r0, r3
 80011b8:	2303      	movs	r3, #3
 80011ba:	4003      	ands	r3, r0
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011c0:	481f      	ldr	r0, [pc, #124]	; (8001240 <__NVIC_SetPriority+0xd4>)
 80011c2:	1dfb      	adds	r3, r7, #7
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	b25b      	sxtb	r3, r3
 80011c8:	089b      	lsrs	r3, r3, #2
 80011ca:	430a      	orrs	r2, r1
 80011cc:	33c0      	adds	r3, #192	; 0xc0
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80011d2:	e031      	b.n	8001238 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011d4:	4a1b      	ldr	r2, [pc, #108]	; (8001244 <__NVIC_SetPriority+0xd8>)
 80011d6:	1dfb      	adds	r3, r7, #7
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	0019      	movs	r1, r3
 80011dc:	230f      	movs	r3, #15
 80011de:	400b      	ands	r3, r1
 80011e0:	3b08      	subs	r3, #8
 80011e2:	089b      	lsrs	r3, r3, #2
 80011e4:	3306      	adds	r3, #6
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	18d3      	adds	r3, r2, r3
 80011ea:	3304      	adds	r3, #4
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	1dfa      	adds	r2, r7, #7
 80011f0:	7812      	ldrb	r2, [r2, #0]
 80011f2:	0011      	movs	r1, r2
 80011f4:	2203      	movs	r2, #3
 80011f6:	400a      	ands	r2, r1
 80011f8:	00d2      	lsls	r2, r2, #3
 80011fa:	21ff      	movs	r1, #255	; 0xff
 80011fc:	4091      	lsls	r1, r2
 80011fe:	000a      	movs	r2, r1
 8001200:	43d2      	mvns	r2, r2
 8001202:	401a      	ands	r2, r3
 8001204:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	019b      	lsls	r3, r3, #6
 800120a:	22ff      	movs	r2, #255	; 0xff
 800120c:	401a      	ands	r2, r3
 800120e:	1dfb      	adds	r3, r7, #7
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	0018      	movs	r0, r3
 8001214:	2303      	movs	r3, #3
 8001216:	4003      	ands	r3, r0
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800121c:	4809      	ldr	r0, [pc, #36]	; (8001244 <__NVIC_SetPriority+0xd8>)
 800121e:	1dfb      	adds	r3, r7, #7
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	001c      	movs	r4, r3
 8001224:	230f      	movs	r3, #15
 8001226:	4023      	ands	r3, r4
 8001228:	3b08      	subs	r3, #8
 800122a:	089b      	lsrs	r3, r3, #2
 800122c:	430a      	orrs	r2, r1
 800122e:	3306      	adds	r3, #6
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	18c3      	adds	r3, r0, r3
 8001234:	3304      	adds	r3, #4
 8001236:	601a      	str	r2, [r3, #0]
}
 8001238:	46c0      	nop			; (mov r8, r8)
 800123a:	46bd      	mov	sp, r7
 800123c:	b003      	add	sp, #12
 800123e:	bd90      	pop	{r4, r7, pc}
 8001240:	e000e100 	.word	0xe000e100
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	1e5a      	subs	r2, r3, #1
 8001254:	2380      	movs	r3, #128	; 0x80
 8001256:	045b      	lsls	r3, r3, #17
 8001258:	429a      	cmp	r2, r3
 800125a:	d301      	bcc.n	8001260 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800125c:	2301      	movs	r3, #1
 800125e:	e010      	b.n	8001282 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001260:	4b0a      	ldr	r3, [pc, #40]	; (800128c <SysTick_Config+0x44>)
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	3a01      	subs	r2, #1
 8001266:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001268:	2301      	movs	r3, #1
 800126a:	425b      	negs	r3, r3
 800126c:	2103      	movs	r1, #3
 800126e:	0018      	movs	r0, r3
 8001270:	f7ff ff7c 	bl	800116c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001274:	4b05      	ldr	r3, [pc, #20]	; (800128c <SysTick_Config+0x44>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800127a:	4b04      	ldr	r3, [pc, #16]	; (800128c <SysTick_Config+0x44>)
 800127c:	2207      	movs	r2, #7
 800127e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001280:	2300      	movs	r3, #0
}
 8001282:	0018      	movs	r0, r3
 8001284:	46bd      	mov	sp, r7
 8001286:	b002      	add	sp, #8
 8001288:	bd80      	pop	{r7, pc}
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	e000e010 	.word	0xe000e010

08001290 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	60b9      	str	r1, [r7, #8]
 8001298:	607a      	str	r2, [r7, #4]
 800129a:	210f      	movs	r1, #15
 800129c:	187b      	adds	r3, r7, r1
 800129e:	1c02      	adds	r2, r0, #0
 80012a0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	187b      	adds	r3, r7, r1
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	b25b      	sxtb	r3, r3
 80012aa:	0011      	movs	r1, r2
 80012ac:	0018      	movs	r0, r3
 80012ae:	f7ff ff5d 	bl	800116c <__NVIC_SetPriority>
}
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	46bd      	mov	sp, r7
 80012b6:	b004      	add	sp, #16
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	0018      	movs	r0, r3
 80012c6:	f7ff ffbf 	bl	8001248 <SysTick_Config>
 80012ca:	0003      	movs	r3, r0
}
 80012cc:	0018      	movs	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	b002      	add	sp, #8
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80012ea:	e14f      	b.n	800158c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2101      	movs	r1, #1
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	4091      	lsls	r1, r2
 80012f6:	000a      	movs	r2, r1
 80012f8:	4013      	ands	r3, r2
 80012fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d100      	bne.n	8001304 <HAL_GPIO_Init+0x30>
 8001302:	e140      	b.n	8001586 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2203      	movs	r2, #3
 800130a:	4013      	ands	r3, r2
 800130c:	2b01      	cmp	r3, #1
 800130e:	d005      	beq.n	800131c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2203      	movs	r2, #3
 8001316:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001318:	2b02      	cmp	r3, #2
 800131a:	d130      	bne.n	800137e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	2203      	movs	r2, #3
 8001328:	409a      	lsls	r2, r3
 800132a:	0013      	movs	r3, r2
 800132c:	43da      	mvns	r2, r3
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	68da      	ldr	r2, [r3, #12]
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	409a      	lsls	r2, r3
 800133e:	0013      	movs	r3, r2
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4313      	orrs	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001352:	2201      	movs	r2, #1
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	409a      	lsls	r2, r3
 8001358:	0013      	movs	r3, r2
 800135a:	43da      	mvns	r2, r3
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	091b      	lsrs	r3, r3, #4
 8001368:	2201      	movs	r2, #1
 800136a:	401a      	ands	r2, r3
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	409a      	lsls	r2, r3
 8001370:	0013      	movs	r3, r2
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	2203      	movs	r2, #3
 8001384:	4013      	ands	r3, r2
 8001386:	2b03      	cmp	r3, #3
 8001388:	d017      	beq.n	80013ba <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	2203      	movs	r2, #3
 8001396:	409a      	lsls	r2, r3
 8001398:	0013      	movs	r3, r2
 800139a:	43da      	mvns	r2, r3
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	4013      	ands	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	689a      	ldr	r2, [r3, #8]
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	409a      	lsls	r2, r3
 80013ac:	0013      	movs	r3, r2
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2203      	movs	r2, #3
 80013c0:	4013      	ands	r3, r2
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d123      	bne.n	800140e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	08da      	lsrs	r2, r3, #3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3208      	adds	r2, #8
 80013ce:	0092      	lsls	r2, r2, #2
 80013d0:	58d3      	ldr	r3, [r2, r3]
 80013d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	2207      	movs	r2, #7
 80013d8:	4013      	ands	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	220f      	movs	r2, #15
 80013de:	409a      	lsls	r2, r3
 80013e0:	0013      	movs	r3, r2
 80013e2:	43da      	mvns	r2, r3
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	4013      	ands	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	691a      	ldr	r2, [r3, #16]
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	2107      	movs	r1, #7
 80013f2:	400b      	ands	r3, r1
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	409a      	lsls	r2, r3
 80013f8:	0013      	movs	r3, r2
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	08da      	lsrs	r2, r3, #3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3208      	adds	r2, #8
 8001408:	0092      	lsls	r2, r2, #2
 800140a:	6939      	ldr	r1, [r7, #16]
 800140c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	2203      	movs	r2, #3
 800141a:	409a      	lsls	r2, r3
 800141c:	0013      	movs	r3, r2
 800141e:	43da      	mvns	r2, r3
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	4013      	ands	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2203      	movs	r2, #3
 800142c:	401a      	ands	r2, r3
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	409a      	lsls	r2, r3
 8001434:	0013      	movs	r3, r2
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685a      	ldr	r2, [r3, #4]
 8001446:	23c0      	movs	r3, #192	; 0xc0
 8001448:	029b      	lsls	r3, r3, #10
 800144a:	4013      	ands	r3, r2
 800144c:	d100      	bne.n	8001450 <HAL_GPIO_Init+0x17c>
 800144e:	e09a      	b.n	8001586 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001450:	4b54      	ldr	r3, [pc, #336]	; (80015a4 <HAL_GPIO_Init+0x2d0>)
 8001452:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001454:	4b53      	ldr	r3, [pc, #332]	; (80015a4 <HAL_GPIO_Init+0x2d0>)
 8001456:	2101      	movs	r1, #1
 8001458:	430a      	orrs	r2, r1
 800145a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800145c:	4a52      	ldr	r2, [pc, #328]	; (80015a8 <HAL_GPIO_Init+0x2d4>)
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	089b      	lsrs	r3, r3, #2
 8001462:	3302      	adds	r3, #2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	589b      	ldr	r3, [r3, r2]
 8001468:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	2203      	movs	r2, #3
 800146e:	4013      	ands	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	220f      	movs	r2, #15
 8001474:	409a      	lsls	r2, r3
 8001476:	0013      	movs	r3, r2
 8001478:	43da      	mvns	r2, r3
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	4013      	ands	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	23a0      	movs	r3, #160	; 0xa0
 8001484:	05db      	lsls	r3, r3, #23
 8001486:	429a      	cmp	r2, r3
 8001488:	d019      	beq.n	80014be <HAL_GPIO_Init+0x1ea>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a47      	ldr	r2, [pc, #284]	; (80015ac <HAL_GPIO_Init+0x2d8>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d013      	beq.n	80014ba <HAL_GPIO_Init+0x1e6>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a46      	ldr	r2, [pc, #280]	; (80015b0 <HAL_GPIO_Init+0x2dc>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d00d      	beq.n	80014b6 <HAL_GPIO_Init+0x1e2>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a45      	ldr	r2, [pc, #276]	; (80015b4 <HAL_GPIO_Init+0x2e0>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d007      	beq.n	80014b2 <HAL_GPIO_Init+0x1de>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a44      	ldr	r2, [pc, #272]	; (80015b8 <HAL_GPIO_Init+0x2e4>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d101      	bne.n	80014ae <HAL_GPIO_Init+0x1da>
 80014aa:	2305      	movs	r3, #5
 80014ac:	e008      	b.n	80014c0 <HAL_GPIO_Init+0x1ec>
 80014ae:	2306      	movs	r3, #6
 80014b0:	e006      	b.n	80014c0 <HAL_GPIO_Init+0x1ec>
 80014b2:	2303      	movs	r3, #3
 80014b4:	e004      	b.n	80014c0 <HAL_GPIO_Init+0x1ec>
 80014b6:	2302      	movs	r3, #2
 80014b8:	e002      	b.n	80014c0 <HAL_GPIO_Init+0x1ec>
 80014ba:	2301      	movs	r3, #1
 80014bc:	e000      	b.n	80014c0 <HAL_GPIO_Init+0x1ec>
 80014be:	2300      	movs	r3, #0
 80014c0:	697a      	ldr	r2, [r7, #20]
 80014c2:	2103      	movs	r1, #3
 80014c4:	400a      	ands	r2, r1
 80014c6:	0092      	lsls	r2, r2, #2
 80014c8:	4093      	lsls	r3, r2
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014d0:	4935      	ldr	r1, [pc, #212]	; (80015a8 <HAL_GPIO_Init+0x2d4>)
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	089b      	lsrs	r3, r3, #2
 80014d6:	3302      	adds	r3, #2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014de:	4b37      	ldr	r3, [pc, #220]	; (80015bc <HAL_GPIO_Init+0x2e8>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	43da      	mvns	r2, r3
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	4013      	ands	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685a      	ldr	r2, [r3, #4]
 80014f2:	2380      	movs	r3, #128	; 0x80
 80014f4:	035b      	lsls	r3, r3, #13
 80014f6:	4013      	ands	r3, r2
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4313      	orrs	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001502:	4b2e      	ldr	r3, [pc, #184]	; (80015bc <HAL_GPIO_Init+0x2e8>)
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001508:	4b2c      	ldr	r3, [pc, #176]	; (80015bc <HAL_GPIO_Init+0x2e8>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	43da      	mvns	r2, r3
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	4013      	ands	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	2380      	movs	r3, #128	; 0x80
 800151e:	039b      	lsls	r3, r3, #14
 8001520:	4013      	ands	r3, r2
 8001522:	d003      	beq.n	800152c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	4313      	orrs	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800152c:	4b23      	ldr	r3, [pc, #140]	; (80015bc <HAL_GPIO_Init+0x2e8>)
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001532:	4b22      	ldr	r3, [pc, #136]	; (80015bc <HAL_GPIO_Init+0x2e8>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	43da      	mvns	r2, r3
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	2380      	movs	r3, #128	; 0x80
 8001548:	029b      	lsls	r3, r3, #10
 800154a:	4013      	ands	r3, r2
 800154c:	d003      	beq.n	8001556 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4313      	orrs	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001556:	4b19      	ldr	r3, [pc, #100]	; (80015bc <HAL_GPIO_Init+0x2e8>)
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800155c:	4b17      	ldr	r3, [pc, #92]	; (80015bc <HAL_GPIO_Init+0x2e8>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	43da      	mvns	r2, r3
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	4013      	ands	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685a      	ldr	r2, [r3, #4]
 8001570:	2380      	movs	r3, #128	; 0x80
 8001572:	025b      	lsls	r3, r3, #9
 8001574:	4013      	ands	r3, r2
 8001576:	d003      	beq.n	8001580 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	4313      	orrs	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001580:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <HAL_GPIO_Init+0x2e8>)
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	3301      	adds	r3, #1
 800158a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	40da      	lsrs	r2, r3
 8001594:	1e13      	subs	r3, r2, #0
 8001596:	d000      	beq.n	800159a <HAL_GPIO_Init+0x2c6>
 8001598:	e6a8      	b.n	80012ec <HAL_GPIO_Init+0x18>
  }
}
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	46c0      	nop			; (mov r8, r8)
 800159e:	46bd      	mov	sp, r7
 80015a0:	b006      	add	sp, #24
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40010000 	.word	0x40010000
 80015ac:	50000400 	.word	0x50000400
 80015b0:	50000800 	.word	0x50000800
 80015b4:	50000c00 	.word	0x50000c00
 80015b8:	50001c00 	.word	0x50001c00
 80015bc:	40010400 	.word	0x40010400

080015c0 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	000a      	movs	r2, r1
 80015ca:	1cbb      	adds	r3, r7, #2
 80015cc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	1cba      	adds	r2, r7, #2
 80015d4:	8812      	ldrh	r2, [r2, #0]
 80015d6:	4013      	ands	r3, r2
 80015d8:	d004      	beq.n	80015e4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80015da:	230f      	movs	r3, #15
 80015dc:	18fb      	adds	r3, r7, r3
 80015de:	2201      	movs	r2, #1
 80015e0:	701a      	strb	r2, [r3, #0]
 80015e2:	e003      	b.n	80015ec <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015e4:	230f      	movs	r3, #15
 80015e6:	18fb      	adds	r3, r7, r3
 80015e8:	2200      	movs	r2, #0
 80015ea:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80015ec:	230f      	movs	r3, #15
 80015ee:	18fb      	adds	r3, r7, r3
 80015f0:	781b      	ldrb	r3, [r3, #0]
}
 80015f2:	0018      	movs	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	b004      	add	sp, #16
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	0008      	movs	r0, r1
 8001604:	0011      	movs	r1, r2
 8001606:	1cbb      	adds	r3, r7, #2
 8001608:	1c02      	adds	r2, r0, #0
 800160a:	801a      	strh	r2, [r3, #0]
 800160c:	1c7b      	adds	r3, r7, #1
 800160e:	1c0a      	adds	r2, r1, #0
 8001610:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001612:	1c7b      	adds	r3, r7, #1
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d004      	beq.n	8001624 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800161a:	1cbb      	adds	r3, r7, #2
 800161c:	881a      	ldrh	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001622:	e003      	b.n	800162c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001624:	1cbb      	adds	r3, r7, #2
 8001626:	881a      	ldrh	r2, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800162c:	46c0      	nop			; (mov r8, r8)
 800162e:	46bd      	mov	sp, r7
 8001630:	b002      	add	sp, #8
 8001632:	bd80      	pop	{r7, pc}

08001634 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	000a      	movs	r2, r1
 800163e:	1cbb      	adds	r3, r7, #2
 8001640:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001648:	1cbb      	adds	r3, r7, #2
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	68fa      	ldr	r2, [r7, #12]
 800164e:	4013      	ands	r3, r2
 8001650:	041a      	lsls	r2, r3, #16
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	43db      	mvns	r3, r3
 8001656:	1cb9      	adds	r1, r7, #2
 8001658:	8809      	ldrh	r1, [r1, #0]
 800165a:	400b      	ands	r3, r1
 800165c:	431a      	orrs	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	619a      	str	r2, [r3, #24]
}
 8001662:	46c0      	nop			; (mov r8, r8)
 8001664:	46bd      	mov	sp, r7
 8001666:	b004      	add	sp, #16
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e082      	b.n	8001784 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2241      	movs	r2, #65	; 0x41
 8001682:	5c9b      	ldrb	r3, [r3, r2]
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d107      	bne.n	800169a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2240      	movs	r2, #64	; 0x40
 800168e:	2100      	movs	r1, #0
 8001690:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	0018      	movs	r0, r3
 8001696:	f7ff fbf9 	bl	8000e8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2241      	movs	r2, #65	; 0x41
 800169e:	2124      	movs	r1, #36	; 0x24
 80016a0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2101      	movs	r1, #1
 80016ae:	438a      	bics	r2, r1
 80016b0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685a      	ldr	r2, [r3, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4934      	ldr	r1, [pc, #208]	; (800178c <HAL_I2C_Init+0x120>)
 80016bc:	400a      	ands	r2, r1
 80016be:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4931      	ldr	r1, [pc, #196]	; (8001790 <HAL_I2C_Init+0x124>)
 80016cc:	400a      	ands	r2, r1
 80016ce:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d108      	bne.n	80016ea <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2180      	movs	r1, #128	; 0x80
 80016e2:	0209      	lsls	r1, r1, #8
 80016e4:	430a      	orrs	r2, r1
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	e007      	b.n	80016fa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689a      	ldr	r2, [r3, #8]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2184      	movs	r1, #132	; 0x84
 80016f4:	0209      	lsls	r1, r1, #8
 80016f6:	430a      	orrs	r2, r1
 80016f8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d104      	bne.n	800170c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2280      	movs	r2, #128	; 0x80
 8001708:	0112      	lsls	r2, r2, #4
 800170a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	685a      	ldr	r2, [r3, #4]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	491f      	ldr	r1, [pc, #124]	; (8001794 <HAL_I2C_Init+0x128>)
 8001718:	430a      	orrs	r2, r1
 800171a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	68da      	ldr	r2, [r3, #12]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	491a      	ldr	r1, [pc, #104]	; (8001790 <HAL_I2C_Init+0x124>)
 8001728:	400a      	ands	r2, r1
 800172a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	691a      	ldr	r2, [r3, #16]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	695b      	ldr	r3, [r3, #20]
 8001734:	431a      	orrs	r2, r3
 8001736:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	430a      	orrs	r2, r1
 8001744:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69d9      	ldr	r1, [r3, #28]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a1a      	ldr	r2, [r3, #32]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	430a      	orrs	r2, r1
 8001754:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2101      	movs	r1, #1
 8001762:	430a      	orrs	r2, r1
 8001764:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2241      	movs	r2, #65	; 0x41
 8001770:	2120      	movs	r1, #32
 8001772:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2242      	movs	r2, #66	; 0x42
 800177e:	2100      	movs	r1, #0
 8001780:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001782:	2300      	movs	r3, #0
}
 8001784:	0018      	movs	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	b002      	add	sp, #8
 800178a:	bd80      	pop	{r7, pc}
 800178c:	f0ffffff 	.word	0xf0ffffff
 8001790:	ffff7fff 	.word	0xffff7fff
 8001794:	02008000 	.word	0x02008000

08001798 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001798:	b590      	push	{r4, r7, lr}
 800179a:	b089      	sub	sp, #36	; 0x24
 800179c:	af02      	add	r7, sp, #8
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	0008      	movs	r0, r1
 80017a2:	607a      	str	r2, [r7, #4]
 80017a4:	0019      	movs	r1, r3
 80017a6:	230a      	movs	r3, #10
 80017a8:	18fb      	adds	r3, r7, r3
 80017aa:	1c02      	adds	r2, r0, #0
 80017ac:	801a      	strh	r2, [r3, #0]
 80017ae:	2308      	movs	r3, #8
 80017b0:	18fb      	adds	r3, r7, r3
 80017b2:	1c0a      	adds	r2, r1, #0
 80017b4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2241      	movs	r2, #65	; 0x41
 80017ba:	5c9b      	ldrb	r3, [r3, r2]
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2b20      	cmp	r3, #32
 80017c0:	d000      	beq.n	80017c4 <HAL_I2C_Master_Transmit+0x2c>
 80017c2:	e0e7      	b.n	8001994 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2240      	movs	r2, #64	; 0x40
 80017c8:	5c9b      	ldrb	r3, [r3, r2]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d101      	bne.n	80017d2 <HAL_I2C_Master_Transmit+0x3a>
 80017ce:	2302      	movs	r3, #2
 80017d0:	e0e1      	b.n	8001996 <HAL_I2C_Master_Transmit+0x1fe>
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2240      	movs	r2, #64	; 0x40
 80017d6:	2101      	movs	r1, #1
 80017d8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017da:	f7ff fc99 	bl	8001110 <HAL_GetTick>
 80017de:	0003      	movs	r3, r0
 80017e0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017e2:	2380      	movs	r3, #128	; 0x80
 80017e4:	0219      	lsls	r1, r3, #8
 80017e6:	68f8      	ldr	r0, [r7, #12]
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	2319      	movs	r3, #25
 80017ee:	2201      	movs	r2, #1
 80017f0:	f000 f8fc 	bl	80019ec <I2C_WaitOnFlagUntilTimeout>
 80017f4:	1e03      	subs	r3, r0, #0
 80017f6:	d001      	beq.n	80017fc <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e0cc      	b.n	8001996 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2241      	movs	r2, #65	; 0x41
 8001800:	2121      	movs	r1, #33	; 0x21
 8001802:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2242      	movs	r2, #66	; 0x42
 8001808:	2110      	movs	r1, #16
 800180a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2200      	movs	r2, #0
 8001810:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2208      	movs	r2, #8
 800181c:	18ba      	adds	r2, r7, r2
 800181e:	8812      	ldrh	r2, [r2, #0]
 8001820:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2200      	movs	r2, #0
 8001826:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800182c:	b29b      	uxth	r3, r3
 800182e:	2bff      	cmp	r3, #255	; 0xff
 8001830:	d911      	bls.n	8001856 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	22ff      	movs	r2, #255	; 0xff
 8001836:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800183c:	b2da      	uxtb	r2, r3
 800183e:	2380      	movs	r3, #128	; 0x80
 8001840:	045c      	lsls	r4, r3, #17
 8001842:	230a      	movs	r3, #10
 8001844:	18fb      	adds	r3, r7, r3
 8001846:	8819      	ldrh	r1, [r3, #0]
 8001848:	68f8      	ldr	r0, [r7, #12]
 800184a:	4b55      	ldr	r3, [pc, #340]	; (80019a0 <HAL_I2C_Master_Transmit+0x208>)
 800184c:	9300      	str	r3, [sp, #0]
 800184e:	0023      	movs	r3, r4
 8001850:	f000 faa4 	bl	8001d9c <I2C_TransferConfig>
 8001854:	e075      	b.n	8001942 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800185a:	b29a      	uxth	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001864:	b2da      	uxtb	r2, r3
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	049c      	lsls	r4, r3, #18
 800186a:	230a      	movs	r3, #10
 800186c:	18fb      	adds	r3, r7, r3
 800186e:	8819      	ldrh	r1, [r3, #0]
 8001870:	68f8      	ldr	r0, [r7, #12]
 8001872:	4b4b      	ldr	r3, [pc, #300]	; (80019a0 <HAL_I2C_Master_Transmit+0x208>)
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	0023      	movs	r3, r4
 8001878:	f000 fa90 	bl	8001d9c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800187c:	e061      	b.n	8001942 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	0018      	movs	r0, r3
 8001886:	f000 f8ff 	bl	8001a88 <I2C_WaitOnTXISFlagUntilTimeout>
 800188a:	1e03      	subs	r3, r0, #0
 800188c:	d001      	beq.n	8001892 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e081      	b.n	8001996 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001896:	781a      	ldrb	r2, [r3, #0]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a2:	1c5a      	adds	r2, r3, #1
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	3b01      	subs	r3, #1
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ba:	3b01      	subs	r3, #1
 80018bc:	b29a      	uxth	r2, r3
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d03a      	beq.n	8001942 <HAL_I2C_Master_Transmit+0x1aa>
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d136      	bne.n	8001942 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80018d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018d6:	68f8      	ldr	r0, [r7, #12]
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	9300      	str	r3, [sp, #0]
 80018dc:	0013      	movs	r3, r2
 80018de:	2200      	movs	r2, #0
 80018e0:	2180      	movs	r1, #128	; 0x80
 80018e2:	f000 f883 	bl	80019ec <I2C_WaitOnFlagUntilTimeout>
 80018e6:	1e03      	subs	r3, r0, #0
 80018e8:	d001      	beq.n	80018ee <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e053      	b.n	8001996 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	2bff      	cmp	r3, #255	; 0xff
 80018f6:	d911      	bls.n	800191c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	22ff      	movs	r2, #255	; 0xff
 80018fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001902:	b2da      	uxtb	r2, r3
 8001904:	2380      	movs	r3, #128	; 0x80
 8001906:	045c      	lsls	r4, r3, #17
 8001908:	230a      	movs	r3, #10
 800190a:	18fb      	adds	r3, r7, r3
 800190c:	8819      	ldrh	r1, [r3, #0]
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	2300      	movs	r3, #0
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	0023      	movs	r3, r4
 8001916:	f000 fa41 	bl	8001d9c <I2C_TransferConfig>
 800191a:	e012      	b.n	8001942 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001920:	b29a      	uxth	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800192a:	b2da      	uxtb	r2, r3
 800192c:	2380      	movs	r3, #128	; 0x80
 800192e:	049c      	lsls	r4, r3, #18
 8001930:	230a      	movs	r3, #10
 8001932:	18fb      	adds	r3, r7, r3
 8001934:	8819      	ldrh	r1, [r3, #0]
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	2300      	movs	r3, #0
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	0023      	movs	r3, r4
 800193e:	f000 fa2d 	bl	8001d9c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001946:	b29b      	uxth	r3, r3
 8001948:	2b00      	cmp	r3, #0
 800194a:	d198      	bne.n	800187e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800194c:	697a      	ldr	r2, [r7, #20]
 800194e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	0018      	movs	r0, r3
 8001954:	f000 f8de 	bl	8001b14 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001958:	1e03      	subs	r3, r0, #0
 800195a:	d001      	beq.n	8001960 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e01a      	b.n	8001996 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2220      	movs	r2, #32
 8001966:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	490c      	ldr	r1, [pc, #48]	; (80019a4 <HAL_I2C_Master_Transmit+0x20c>)
 8001974:	400a      	ands	r2, r1
 8001976:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2241      	movs	r2, #65	; 0x41
 800197c:	2120      	movs	r1, #32
 800197e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2242      	movs	r2, #66	; 0x42
 8001984:	2100      	movs	r1, #0
 8001986:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2240      	movs	r2, #64	; 0x40
 800198c:	2100      	movs	r1, #0
 800198e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001990:	2300      	movs	r3, #0
 8001992:	e000      	b.n	8001996 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001994:	2302      	movs	r3, #2
  }
}
 8001996:	0018      	movs	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	b007      	add	sp, #28
 800199c:	bd90      	pop	{r4, r7, pc}
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	80002000 	.word	0x80002000
 80019a4:	fe00e800 	.word	0xfe00e800

080019a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	2202      	movs	r2, #2
 80019b8:	4013      	ands	r3, r2
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d103      	bne.n	80019c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2200      	movs	r2, #0
 80019c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	2201      	movs	r2, #1
 80019ce:	4013      	ands	r3, r2
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d007      	beq.n	80019e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	699a      	ldr	r2, [r3, #24]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2101      	movs	r1, #1
 80019e0:	430a      	orrs	r2, r1
 80019e2:	619a      	str	r2, [r3, #24]
  }
}
 80019e4:	46c0      	nop			; (mov r8, r8)
 80019e6:	46bd      	mov	sp, r7
 80019e8:	b002      	add	sp, #8
 80019ea:	bd80      	pop	{r7, pc}

080019ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	603b      	str	r3, [r7, #0]
 80019f8:	1dfb      	adds	r3, r7, #7
 80019fa:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019fc:	e030      	b.n	8001a60 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	3301      	adds	r3, #1
 8001a02:	d02d      	beq.n	8001a60 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a04:	f7ff fb84 	bl	8001110 <HAL_GetTick>
 8001a08:	0002      	movs	r2, r0
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d302      	bcc.n	8001a1a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d122      	bne.n	8001a60 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	4013      	ands	r3, r2
 8001a24:	68ba      	ldr	r2, [r7, #8]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	425a      	negs	r2, r3
 8001a2a:	4153      	adcs	r3, r2
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	001a      	movs	r2, r3
 8001a30:	1dfb      	adds	r3, r7, #7
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d113      	bne.n	8001a60 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3c:	2220      	movs	r2, #32
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2241      	movs	r2, #65	; 0x41
 8001a48:	2120      	movs	r1, #32
 8001a4a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2242      	movs	r2, #66	; 0x42
 8001a50:	2100      	movs	r1, #0
 8001a52:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2240      	movs	r2, #64	; 0x40
 8001a58:	2100      	movs	r1, #0
 8001a5a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e00f      	b.n	8001a80 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	68ba      	ldr	r2, [r7, #8]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	425a      	negs	r2, r3
 8001a70:	4153      	adcs	r3, r2
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	001a      	movs	r2, r3
 8001a76:	1dfb      	adds	r3, r7, #7
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d0bf      	beq.n	80019fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	0018      	movs	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	b004      	add	sp, #16
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a94:	e032      	b.n	8001afc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	68b9      	ldr	r1, [r7, #8]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f000 f87d 	bl	8001b9c <I2C_IsErrorOccurred>
 8001aa2:	1e03      	subs	r3, r0, #0
 8001aa4:	d001      	beq.n	8001aaa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e030      	b.n	8001b0c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	3301      	adds	r3, #1
 8001aae:	d025      	beq.n	8001afc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ab0:	f7ff fb2e 	bl	8001110 <HAL_GetTick>
 8001ab4:	0002      	movs	r2, r0
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d302      	bcc.n	8001ac6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d11a      	bne.n	8001afc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	2202      	movs	r2, #2
 8001ace:	4013      	ands	r3, r2
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d013      	beq.n	8001afc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad8:	2220      	movs	r2, #32
 8001ada:	431a      	orrs	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2241      	movs	r2, #65	; 0x41
 8001ae4:	2120      	movs	r1, #32
 8001ae6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2242      	movs	r2, #66	; 0x42
 8001aec:	2100      	movs	r1, #0
 8001aee:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2240      	movs	r2, #64	; 0x40
 8001af4:	2100      	movs	r1, #0
 8001af6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e007      	b.n	8001b0c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	2202      	movs	r2, #2
 8001b04:	4013      	ands	r3, r2
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d1c5      	bne.n	8001a96 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	b004      	add	sp, #16
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b20:	e02f      	b.n	8001b82 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	68b9      	ldr	r1, [r7, #8]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	0018      	movs	r0, r3
 8001b2a:	f000 f837 	bl	8001b9c <I2C_IsErrorOccurred>
 8001b2e:	1e03      	subs	r3, r0, #0
 8001b30:	d001      	beq.n	8001b36 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e02d      	b.n	8001b92 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b36:	f7ff faeb 	bl	8001110 <HAL_GetTick>
 8001b3a:	0002      	movs	r2, r0
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	68ba      	ldr	r2, [r7, #8]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d302      	bcc.n	8001b4c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d11a      	bne.n	8001b82 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	2220      	movs	r2, #32
 8001b54:	4013      	ands	r3, r2
 8001b56:	2b20      	cmp	r3, #32
 8001b58:	d013      	beq.n	8001b82 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5e:	2220      	movs	r2, #32
 8001b60:	431a      	orrs	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2241      	movs	r2, #65	; 0x41
 8001b6a:	2120      	movs	r1, #32
 8001b6c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2242      	movs	r2, #66	; 0x42
 8001b72:	2100      	movs	r1, #0
 8001b74:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2240      	movs	r2, #64	; 0x40
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e007      	b.n	8001b92 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	2220      	movs	r2, #32
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	2b20      	cmp	r3, #32
 8001b8e:	d1c8      	bne.n	8001b22 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	0018      	movs	r0, r3
 8001b94:	46bd      	mov	sp, r7
 8001b96:	b004      	add	sp, #16
 8001b98:	bd80      	pop	{r7, pc}
	...

08001b9c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b9c:	b590      	push	{r4, r7, lr}
 8001b9e:	b08b      	sub	sp, #44	; 0x2c
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ba8:	2327      	movs	r3, #39	; 0x27
 8001baa:	18fb      	adds	r3, r7, r3
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	2210      	movs	r2, #16
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d100      	bne.n	8001bca <I2C_IsErrorOccurred+0x2e>
 8001bc8:	e082      	b.n	8001cd0 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2210      	movs	r2, #16
 8001bd0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001bd2:	e060      	b.n	8001c96 <I2C_IsErrorOccurred+0xfa>
 8001bd4:	2427      	movs	r4, #39	; 0x27
 8001bd6:	193b      	adds	r3, r7, r4
 8001bd8:	193a      	adds	r2, r7, r4
 8001bda:	7812      	ldrb	r2, [r2, #0]
 8001bdc:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	3301      	adds	r3, #1
 8001be2:	d058      	beq.n	8001c96 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001be4:	f7ff fa94 	bl	8001110 <HAL_GetTick>
 8001be8:	0002      	movs	r2, r0
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	68ba      	ldr	r2, [r7, #8]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d306      	bcc.n	8001c02 <I2C_IsErrorOccurred+0x66>
 8001bf4:	193b      	adds	r3, r7, r4
 8001bf6:	193a      	adds	r2, r7, r4
 8001bf8:	7812      	ldrb	r2, [r2, #0]
 8001bfa:	701a      	strb	r2, [r3, #0]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d149      	bne.n	8001c96 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	685a      	ldr	r2, [r3, #4]
 8001c08:	2380      	movs	r3, #128	; 0x80
 8001c0a:	01db      	lsls	r3, r3, #7
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001c10:	2013      	movs	r0, #19
 8001c12:	183b      	adds	r3, r7, r0
 8001c14:	68fa      	ldr	r2, [r7, #12]
 8001c16:	2142      	movs	r1, #66	; 0x42
 8001c18:	5c52      	ldrb	r2, [r2, r1]
 8001c1a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	699a      	ldr	r2, [r3, #24]
 8001c22:	2380      	movs	r3, #128	; 0x80
 8001c24:	021b      	lsls	r3, r3, #8
 8001c26:	401a      	ands	r2, r3
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	021b      	lsls	r3, r3, #8
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d126      	bne.n	8001c7e <I2C_IsErrorOccurred+0xe2>
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	2380      	movs	r3, #128	; 0x80
 8001c34:	01db      	lsls	r3, r3, #7
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d021      	beq.n	8001c7e <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8001c3a:	183b      	adds	r3, r7, r0
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	2b20      	cmp	r3, #32
 8001c40:	d01d      	beq.n	8001c7e <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2180      	movs	r1, #128	; 0x80
 8001c4e:	01c9      	lsls	r1, r1, #7
 8001c50:	430a      	orrs	r2, r1
 8001c52:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001c54:	f7ff fa5c 	bl	8001110 <HAL_GetTick>
 8001c58:	0003      	movs	r3, r0
 8001c5a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c5c:	e00f      	b.n	8001c7e <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001c5e:	f7ff fa57 	bl	8001110 <HAL_GetTick>
 8001c62:	0002      	movs	r2, r0
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b19      	cmp	r3, #25
 8001c6a:	d908      	bls.n	8001c7e <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001c6c:	6a3b      	ldr	r3, [r7, #32]
 8001c6e:	2220      	movs	r2, #32
 8001c70:	4313      	orrs	r3, r2
 8001c72:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001c74:	2327      	movs	r3, #39	; 0x27
 8001c76:	18fb      	adds	r3, r7, r3
 8001c78:	2201      	movs	r2, #1
 8001c7a:	701a      	strb	r2, [r3, #0]

              break;
 8001c7c:	e00b      	b.n	8001c96 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	2220      	movs	r2, #32
 8001c86:	4013      	ands	r3, r2
 8001c88:	2127      	movs	r1, #39	; 0x27
 8001c8a:	187a      	adds	r2, r7, r1
 8001c8c:	1879      	adds	r1, r7, r1
 8001c8e:	7809      	ldrb	r1, [r1, #0]
 8001c90:	7011      	strb	r1, [r2, #0]
 8001c92:	2b20      	cmp	r3, #32
 8001c94:	d1e3      	bne.n	8001c5e <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	2220      	movs	r2, #32
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	2b20      	cmp	r3, #32
 8001ca2:	d004      	beq.n	8001cae <I2C_IsErrorOccurred+0x112>
 8001ca4:	2327      	movs	r3, #39	; 0x27
 8001ca6:	18fb      	adds	r3, r7, r3
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d092      	beq.n	8001bd4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001cae:	2327      	movs	r3, #39	; 0x27
 8001cb0:	18fb      	adds	r3, r7, r3
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d103      	bne.n	8001cc0 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2220      	movs	r2, #32
 8001cbe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001cc0:	6a3b      	ldr	r3, [r7, #32]
 8001cc2:	2204      	movs	r2, #4
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001cc8:	2327      	movs	r3, #39	; 0x27
 8001cca:	18fb      	adds	r3, r7, r3
 8001ccc:	2201      	movs	r2, #1
 8001cce:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	2380      	movs	r3, #128	; 0x80
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	4013      	ands	r3, r2
 8001ce0:	d00c      	beq.n	8001cfc <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001ce2:	6a3b      	ldr	r3, [r7, #32]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2280      	movs	r2, #128	; 0x80
 8001cf0:	0052      	lsls	r2, r2, #1
 8001cf2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001cf4:	2327      	movs	r3, #39	; 0x27
 8001cf6:	18fb      	adds	r3, r7, r3
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	2380      	movs	r3, #128	; 0x80
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	4013      	ands	r3, r2
 8001d04:	d00c      	beq.n	8001d20 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001d06:	6a3b      	ldr	r3, [r7, #32]
 8001d08:	2208      	movs	r2, #8
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2280      	movs	r2, #128	; 0x80
 8001d14:	00d2      	lsls	r2, r2, #3
 8001d16:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d18:	2327      	movs	r3, #39	; 0x27
 8001d1a:	18fb      	adds	r3, r7, r3
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	2380      	movs	r3, #128	; 0x80
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4013      	ands	r3, r2
 8001d28:	d00c      	beq.n	8001d44 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001d2a:	6a3b      	ldr	r3, [r7, #32]
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2280      	movs	r2, #128	; 0x80
 8001d38:	0092      	lsls	r2, r2, #2
 8001d3a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d3c:	2327      	movs	r3, #39	; 0x27
 8001d3e:	18fb      	adds	r3, r7, r3
 8001d40:	2201      	movs	r2, #1
 8001d42:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001d44:	2327      	movs	r3, #39	; 0x27
 8001d46:	18fb      	adds	r3, r7, r3
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d01d      	beq.n	8001d8a <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	0018      	movs	r0, r3
 8001d52:	f7ff fe29 	bl	80019a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	490d      	ldr	r1, [pc, #52]	; (8001d98 <I2C_IsErrorOccurred+0x1fc>)
 8001d62:	400a      	ands	r2, r1
 8001d64:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d6a:	6a3b      	ldr	r3, [r7, #32]
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2241      	movs	r2, #65	; 0x41
 8001d76:	2120      	movs	r1, #32
 8001d78:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2242      	movs	r2, #66	; 0x42
 8001d7e:	2100      	movs	r1, #0
 8001d80:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2240      	movs	r2, #64	; 0x40
 8001d86:	2100      	movs	r1, #0
 8001d88:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001d8a:	2327      	movs	r3, #39	; 0x27
 8001d8c:	18fb      	adds	r3, r7, r3
 8001d8e:	781b      	ldrb	r3, [r3, #0]
}
 8001d90:	0018      	movs	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	b00b      	add	sp, #44	; 0x2c
 8001d96:	bd90      	pop	{r4, r7, pc}
 8001d98:	fe00e800 	.word	0xfe00e800

08001d9c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	b087      	sub	sp, #28
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	0008      	movs	r0, r1
 8001da6:	0011      	movs	r1, r2
 8001da8:	607b      	str	r3, [r7, #4]
 8001daa:	240a      	movs	r4, #10
 8001dac:	193b      	adds	r3, r7, r4
 8001dae:	1c02      	adds	r2, r0, #0
 8001db0:	801a      	strh	r2, [r3, #0]
 8001db2:	2009      	movs	r0, #9
 8001db4:	183b      	adds	r3, r7, r0
 8001db6:	1c0a      	adds	r2, r1, #0
 8001db8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001dba:	193b      	adds	r3, r7, r4
 8001dbc:	881b      	ldrh	r3, [r3, #0]
 8001dbe:	059b      	lsls	r3, r3, #22
 8001dc0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001dc2:	183b      	adds	r3, r7, r0
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	0419      	lsls	r1, r3, #16
 8001dc8:	23ff      	movs	r3, #255	; 0xff
 8001dca:	041b      	lsls	r3, r3, #16
 8001dcc:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001dce:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	085b      	lsrs	r3, r3, #1
 8001ddc:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001de6:	0d51      	lsrs	r1, r2, #21
 8001de8:	2280      	movs	r2, #128	; 0x80
 8001dea:	00d2      	lsls	r2, r2, #3
 8001dec:	400a      	ands	r2, r1
 8001dee:	4907      	ldr	r1, [pc, #28]	; (8001e0c <I2C_TransferConfig+0x70>)
 8001df0:	430a      	orrs	r2, r1
 8001df2:	43d2      	mvns	r2, r2
 8001df4:	401a      	ands	r2, r3
 8001df6:	0011      	movs	r1, r2
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001e02:	46c0      	nop			; (mov r8, r8)
 8001e04:	46bd      	mov	sp, r7
 8001e06:	b007      	add	sp, #28
 8001e08:	bd90      	pop	{r4, r7, pc}
 8001e0a:	46c0      	nop			; (mov r8, r8)
 8001e0c:	03ff63ff 	.word	0x03ff63ff

08001e10 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2241      	movs	r2, #65	; 0x41
 8001e1e:	5c9b      	ldrb	r3, [r3, r2]
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b20      	cmp	r3, #32
 8001e24:	d138      	bne.n	8001e98 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2240      	movs	r2, #64	; 0x40
 8001e2a:	5c9b      	ldrb	r3, [r3, r2]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d101      	bne.n	8001e34 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e30:	2302      	movs	r3, #2
 8001e32:	e032      	b.n	8001e9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2240      	movs	r2, #64	; 0x40
 8001e38:	2101      	movs	r1, #1
 8001e3a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2241      	movs	r2, #65	; 0x41
 8001e40:	2124      	movs	r1, #36	; 0x24
 8001e42:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2101      	movs	r1, #1
 8001e50:	438a      	bics	r2, r1
 8001e52:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4911      	ldr	r1, [pc, #68]	; (8001ea4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001e60:	400a      	ands	r2, r1
 8001e62:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6819      	ldr	r1, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2101      	movs	r1, #1
 8001e80:	430a      	orrs	r2, r1
 8001e82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2241      	movs	r2, #65	; 0x41
 8001e88:	2120      	movs	r1, #32
 8001e8a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2240      	movs	r2, #64	; 0x40
 8001e90:	2100      	movs	r1, #0
 8001e92:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e94:	2300      	movs	r3, #0
 8001e96:	e000      	b.n	8001e9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e98:	2302      	movs	r3, #2
  }
}
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	b002      	add	sp, #8
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	46c0      	nop			; (mov r8, r8)
 8001ea4:	ffffefff 	.word	0xffffefff

08001ea8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2241      	movs	r2, #65	; 0x41
 8001eb6:	5c9b      	ldrb	r3, [r3, r2]
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b20      	cmp	r3, #32
 8001ebc:	d139      	bne.n	8001f32 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2240      	movs	r2, #64	; 0x40
 8001ec2:	5c9b      	ldrb	r3, [r3, r2]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d101      	bne.n	8001ecc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ec8:	2302      	movs	r3, #2
 8001eca:	e033      	b.n	8001f34 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2240      	movs	r2, #64	; 0x40
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2241      	movs	r2, #65	; 0x41
 8001ed8:	2124      	movs	r1, #36	; 0x24
 8001eda:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	438a      	bics	r2, r1
 8001eea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4a11      	ldr	r2, [pc, #68]	; (8001f3c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001ef8:	4013      	ands	r3, r2
 8001efa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	021b      	lsls	r3, r3, #8
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2101      	movs	r1, #1
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2241      	movs	r2, #65	; 0x41
 8001f22:	2120      	movs	r1, #32
 8001f24:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2240      	movs	r2, #64	; 0x40
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	e000      	b.n	8001f34 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f32:	2302      	movs	r3, #2
  }
}
 8001f34:	0018      	movs	r0, r3
 8001f36:	46bd      	mov	sp, r7
 8001f38:	b004      	add	sp, #16
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	fffff0ff 	.word	0xfffff0ff

08001f40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f40:	b5b0      	push	{r4, r5, r7, lr}
 8001f42:	b08a      	sub	sp, #40	; 0x28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d102      	bne.n	8001f54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	f000 fbaf 	bl	80026b2 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f54:	4bcf      	ldr	r3, [pc, #828]	; (8002294 <HAL_RCC_OscConfig+0x354>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	220c      	movs	r2, #12
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f5e:	4bcd      	ldr	r3, [pc, #820]	; (8002294 <HAL_RCC_OscConfig+0x354>)
 8001f60:	68da      	ldr	r2, [r3, #12]
 8001f62:	2380      	movs	r3, #128	; 0x80
 8001f64:	025b      	lsls	r3, r3, #9
 8001f66:	4013      	ands	r3, r2
 8001f68:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	4013      	ands	r3, r2
 8001f72:	d100      	bne.n	8001f76 <HAL_RCC_OscConfig+0x36>
 8001f74:	e07e      	b.n	8002074 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f76:	6a3b      	ldr	r3, [r7, #32]
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	d007      	beq.n	8001f8c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f7c:	6a3b      	ldr	r3, [r7, #32]
 8001f7e:	2b0c      	cmp	r3, #12
 8001f80:	d112      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x68>
 8001f82:	69fa      	ldr	r2, [r7, #28]
 8001f84:	2380      	movs	r3, #128	; 0x80
 8001f86:	025b      	lsls	r3, r3, #9
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d10d      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f8c:	4bc1      	ldr	r3, [pc, #772]	; (8002294 <HAL_RCC_OscConfig+0x354>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	2380      	movs	r3, #128	; 0x80
 8001f92:	029b      	lsls	r3, r3, #10
 8001f94:	4013      	ands	r3, r2
 8001f96:	d100      	bne.n	8001f9a <HAL_RCC_OscConfig+0x5a>
 8001f98:	e06b      	b.n	8002072 <HAL_RCC_OscConfig+0x132>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d167      	bne.n	8002072 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	f000 fb85 	bl	80026b2 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685a      	ldr	r2, [r3, #4]
 8001fac:	2380      	movs	r3, #128	; 0x80
 8001fae:	025b      	lsls	r3, r3, #9
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d107      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x84>
 8001fb4:	4bb7      	ldr	r3, [pc, #732]	; (8002294 <HAL_RCC_OscConfig+0x354>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4bb6      	ldr	r3, [pc, #728]	; (8002294 <HAL_RCC_OscConfig+0x354>)
 8001fba:	2180      	movs	r1, #128	; 0x80
 8001fbc:	0249      	lsls	r1, r1, #9
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	e027      	b.n	8002014 <HAL_RCC_OscConfig+0xd4>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	23a0      	movs	r3, #160	; 0xa0
 8001fca:	02db      	lsls	r3, r3, #11
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d10e      	bne.n	8001fee <HAL_RCC_OscConfig+0xae>
 8001fd0:	4bb0      	ldr	r3, [pc, #704]	; (8002294 <HAL_RCC_OscConfig+0x354>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	4baf      	ldr	r3, [pc, #700]	; (8002294 <HAL_RCC_OscConfig+0x354>)
 8001fd6:	2180      	movs	r1, #128	; 0x80
 8001fd8:	02c9      	lsls	r1, r1, #11
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	4bad      	ldr	r3, [pc, #692]	; (8002294 <HAL_RCC_OscConfig+0x354>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	4bac      	ldr	r3, [pc, #688]	; (8002294 <HAL_RCC_OscConfig+0x354>)
 8001fe4:	2180      	movs	r1, #128	; 0x80
 8001fe6:	0249      	lsls	r1, r1, #9
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	e012      	b.n	8002014 <HAL_RCC_OscConfig+0xd4>
 8001fee:	4ba9      	ldr	r3, [pc, #676]	; (8002294 <HAL_RCC_OscConfig+0x354>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	4ba8      	ldr	r3, [pc, #672]	; (8002294 <HAL_RCC_OscConfig+0x354>)
 8001ff4:	49a8      	ldr	r1, [pc, #672]	; (8002298 <HAL_RCC_OscConfig+0x358>)
 8001ff6:	400a      	ands	r2, r1
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	4ba6      	ldr	r3, [pc, #664]	; (8002294 <HAL_RCC_OscConfig+0x354>)
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	2380      	movs	r3, #128	; 0x80
 8002000:	025b      	lsls	r3, r3, #9
 8002002:	4013      	ands	r3, r2
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	4ba2      	ldr	r3, [pc, #648]	; (8002294 <HAL_RCC_OscConfig+0x354>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	4ba1      	ldr	r3, [pc, #644]	; (8002294 <HAL_RCC_OscConfig+0x354>)
 800200e:	49a3      	ldr	r1, [pc, #652]	; (800229c <HAL_RCC_OscConfig+0x35c>)
 8002010:	400a      	ands	r2, r1
 8002012:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d015      	beq.n	8002048 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201c:	f7ff f878 	bl	8001110 <HAL_GetTick>
 8002020:	0003      	movs	r3, r0
 8002022:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002024:	e009      	b.n	800203a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002026:	f7ff f873 	bl	8001110 <HAL_GetTick>
 800202a:	0002      	movs	r2, r0
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b64      	cmp	r3, #100	; 0x64
 8002032:	d902      	bls.n	800203a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	f000 fb3c 	bl	80026b2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800203a:	4b96      	ldr	r3, [pc, #600]	; (8002294 <HAL_RCC_OscConfig+0x354>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	2380      	movs	r3, #128	; 0x80
 8002040:	029b      	lsls	r3, r3, #10
 8002042:	4013      	ands	r3, r2
 8002044:	d0ef      	beq.n	8002026 <HAL_RCC_OscConfig+0xe6>
 8002046:	e015      	b.n	8002074 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002048:	f7ff f862 	bl	8001110 <HAL_GetTick>
 800204c:	0003      	movs	r3, r0
 800204e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002052:	f7ff f85d 	bl	8001110 <HAL_GetTick>
 8002056:	0002      	movs	r2, r0
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b64      	cmp	r3, #100	; 0x64
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e326      	b.n	80026b2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002064:	4b8b      	ldr	r3, [pc, #556]	; (8002294 <HAL_RCC_OscConfig+0x354>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	2380      	movs	r3, #128	; 0x80
 800206a:	029b      	lsls	r3, r3, #10
 800206c:	4013      	ands	r3, r2
 800206e:	d1f0      	bne.n	8002052 <HAL_RCC_OscConfig+0x112>
 8002070:	e000      	b.n	8002074 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002072:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2202      	movs	r2, #2
 800207a:	4013      	ands	r3, r2
 800207c:	d100      	bne.n	8002080 <HAL_RCC_OscConfig+0x140>
 800207e:	e08b      	b.n	8002198 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002086:	6a3b      	ldr	r3, [r7, #32]
 8002088:	2b04      	cmp	r3, #4
 800208a:	d005      	beq.n	8002098 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800208c:	6a3b      	ldr	r3, [r7, #32]
 800208e:	2b0c      	cmp	r3, #12
 8002090:	d13e      	bne.n	8002110 <HAL_RCC_OscConfig+0x1d0>
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d13b      	bne.n	8002110 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002098:	4b7e      	ldr	r3, [pc, #504]	; (8002294 <HAL_RCC_OscConfig+0x354>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2204      	movs	r2, #4
 800209e:	4013      	ands	r3, r2
 80020a0:	d004      	beq.n	80020ac <HAL_RCC_OscConfig+0x16c>
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e302      	b.n	80026b2 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ac:	4b79      	ldr	r3, [pc, #484]	; (8002294 <HAL_RCC_OscConfig+0x354>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	4a7b      	ldr	r2, [pc, #492]	; (80022a0 <HAL_RCC_OscConfig+0x360>)
 80020b2:	4013      	ands	r3, r2
 80020b4:	0019      	movs	r1, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	021a      	lsls	r2, r3, #8
 80020bc:	4b75      	ldr	r3, [pc, #468]	; (8002294 <HAL_RCC_OscConfig+0x354>)
 80020be:	430a      	orrs	r2, r1
 80020c0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80020c2:	4b74      	ldr	r3, [pc, #464]	; (8002294 <HAL_RCC_OscConfig+0x354>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2209      	movs	r2, #9
 80020c8:	4393      	bics	r3, r2
 80020ca:	0019      	movs	r1, r3
 80020cc:	4b71      	ldr	r3, [pc, #452]	; (8002294 <HAL_RCC_OscConfig+0x354>)
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020d4:	f000 fc40 	bl	8002958 <HAL_RCC_GetSysClockFreq>
 80020d8:	0001      	movs	r1, r0
 80020da:	4b6e      	ldr	r3, [pc, #440]	; (8002294 <HAL_RCC_OscConfig+0x354>)
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	091b      	lsrs	r3, r3, #4
 80020e0:	220f      	movs	r2, #15
 80020e2:	4013      	ands	r3, r2
 80020e4:	4a6f      	ldr	r2, [pc, #444]	; (80022a4 <HAL_RCC_OscConfig+0x364>)
 80020e6:	5cd3      	ldrb	r3, [r2, r3]
 80020e8:	000a      	movs	r2, r1
 80020ea:	40da      	lsrs	r2, r3
 80020ec:	4b6e      	ldr	r3, [pc, #440]	; (80022a8 <HAL_RCC_OscConfig+0x368>)
 80020ee:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80020f0:	4b6e      	ldr	r3, [pc, #440]	; (80022ac <HAL_RCC_OscConfig+0x36c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2513      	movs	r5, #19
 80020f6:	197c      	adds	r4, r7, r5
 80020f8:	0018      	movs	r0, r3
 80020fa:	f7fe ffc3 	bl	8001084 <HAL_InitTick>
 80020fe:	0003      	movs	r3, r0
 8002100:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002102:	197b      	adds	r3, r7, r5
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d046      	beq.n	8002198 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800210a:	197b      	adds	r3, r7, r5
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	e2d0      	b.n	80026b2 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d027      	beq.n	8002166 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002116:	4b5f      	ldr	r3, [pc, #380]	; (8002294 <HAL_RCC_OscConfig+0x354>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2209      	movs	r2, #9
 800211c:	4393      	bics	r3, r2
 800211e:	0019      	movs	r1, r3
 8002120:	4b5c      	ldr	r3, [pc, #368]	; (8002294 <HAL_RCC_OscConfig+0x354>)
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	430a      	orrs	r2, r1
 8002126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002128:	f7fe fff2 	bl	8001110 <HAL_GetTick>
 800212c:	0003      	movs	r3, r0
 800212e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002132:	f7fe ffed 	bl	8001110 <HAL_GetTick>
 8002136:	0002      	movs	r2, r0
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e2b6      	b.n	80026b2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002144:	4b53      	ldr	r3, [pc, #332]	; (8002294 <HAL_RCC_OscConfig+0x354>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2204      	movs	r2, #4
 800214a:	4013      	ands	r3, r2
 800214c:	d0f1      	beq.n	8002132 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800214e:	4b51      	ldr	r3, [pc, #324]	; (8002294 <HAL_RCC_OscConfig+0x354>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	4a53      	ldr	r2, [pc, #332]	; (80022a0 <HAL_RCC_OscConfig+0x360>)
 8002154:	4013      	ands	r3, r2
 8002156:	0019      	movs	r1, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	021a      	lsls	r2, r3, #8
 800215e:	4b4d      	ldr	r3, [pc, #308]	; (8002294 <HAL_RCC_OscConfig+0x354>)
 8002160:	430a      	orrs	r2, r1
 8002162:	605a      	str	r2, [r3, #4]
 8002164:	e018      	b.n	8002198 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002166:	4b4b      	ldr	r3, [pc, #300]	; (8002294 <HAL_RCC_OscConfig+0x354>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	4b4a      	ldr	r3, [pc, #296]	; (8002294 <HAL_RCC_OscConfig+0x354>)
 800216c:	2101      	movs	r1, #1
 800216e:	438a      	bics	r2, r1
 8002170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002172:	f7fe ffcd 	bl	8001110 <HAL_GetTick>
 8002176:	0003      	movs	r3, r0
 8002178:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800217c:	f7fe ffc8 	bl	8001110 <HAL_GetTick>
 8002180:	0002      	movs	r2, r0
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e291      	b.n	80026b2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800218e:	4b41      	ldr	r3, [pc, #260]	; (8002294 <HAL_RCC_OscConfig+0x354>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2204      	movs	r2, #4
 8002194:	4013      	ands	r3, r2
 8002196:	d1f1      	bne.n	800217c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2210      	movs	r2, #16
 800219e:	4013      	ands	r3, r2
 80021a0:	d100      	bne.n	80021a4 <HAL_RCC_OscConfig+0x264>
 80021a2:	e0a1      	b.n	80022e8 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021a4:	6a3b      	ldr	r3, [r7, #32]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d140      	bne.n	800222c <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021aa:	4b3a      	ldr	r3, [pc, #232]	; (8002294 <HAL_RCC_OscConfig+0x354>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	2380      	movs	r3, #128	; 0x80
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4013      	ands	r3, r2
 80021b4:	d005      	beq.n	80021c2 <HAL_RCC_OscConfig+0x282>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e277      	b.n	80026b2 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021c2:	4b34      	ldr	r3, [pc, #208]	; (8002294 <HAL_RCC_OscConfig+0x354>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	4a3a      	ldr	r2, [pc, #232]	; (80022b0 <HAL_RCC_OscConfig+0x370>)
 80021c8:	4013      	ands	r3, r2
 80021ca:	0019      	movs	r1, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021d0:	4b30      	ldr	r3, [pc, #192]	; (8002294 <HAL_RCC_OscConfig+0x354>)
 80021d2:	430a      	orrs	r2, r1
 80021d4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021d6:	4b2f      	ldr	r3, [pc, #188]	; (8002294 <HAL_RCC_OscConfig+0x354>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	021b      	lsls	r3, r3, #8
 80021dc:	0a19      	lsrs	r1, r3, #8
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	061a      	lsls	r2, r3, #24
 80021e4:	4b2b      	ldr	r3, [pc, #172]	; (8002294 <HAL_RCC_OscConfig+0x354>)
 80021e6:	430a      	orrs	r2, r1
 80021e8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ee:	0b5b      	lsrs	r3, r3, #13
 80021f0:	3301      	adds	r3, #1
 80021f2:	2280      	movs	r2, #128	; 0x80
 80021f4:	0212      	lsls	r2, r2, #8
 80021f6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80021f8:	4b26      	ldr	r3, [pc, #152]	; (8002294 <HAL_RCC_OscConfig+0x354>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	091b      	lsrs	r3, r3, #4
 80021fe:	210f      	movs	r1, #15
 8002200:	400b      	ands	r3, r1
 8002202:	4928      	ldr	r1, [pc, #160]	; (80022a4 <HAL_RCC_OscConfig+0x364>)
 8002204:	5ccb      	ldrb	r3, [r1, r3]
 8002206:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002208:	4b27      	ldr	r3, [pc, #156]	; (80022a8 <HAL_RCC_OscConfig+0x368>)
 800220a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800220c:	4b27      	ldr	r3, [pc, #156]	; (80022ac <HAL_RCC_OscConfig+0x36c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2513      	movs	r5, #19
 8002212:	197c      	adds	r4, r7, r5
 8002214:	0018      	movs	r0, r3
 8002216:	f7fe ff35 	bl	8001084 <HAL_InitTick>
 800221a:	0003      	movs	r3, r0
 800221c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800221e:	197b      	adds	r3, r7, r5
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d060      	beq.n	80022e8 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8002226:	197b      	adds	r3, r7, r5
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	e242      	b.n	80026b2 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	69db      	ldr	r3, [r3, #28]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d03f      	beq.n	80022b4 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002234:	4b17      	ldr	r3, [pc, #92]	; (8002294 <HAL_RCC_OscConfig+0x354>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	4b16      	ldr	r3, [pc, #88]	; (8002294 <HAL_RCC_OscConfig+0x354>)
 800223a:	2180      	movs	r1, #128	; 0x80
 800223c:	0049      	lsls	r1, r1, #1
 800223e:	430a      	orrs	r2, r1
 8002240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002242:	f7fe ff65 	bl	8001110 <HAL_GetTick>
 8002246:	0003      	movs	r3, r0
 8002248:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800224c:	f7fe ff60 	bl	8001110 <HAL_GetTick>
 8002250:	0002      	movs	r2, r0
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e229      	b.n	80026b2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800225e:	4b0d      	ldr	r3, [pc, #52]	; (8002294 <HAL_RCC_OscConfig+0x354>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	2380      	movs	r3, #128	; 0x80
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4013      	ands	r3, r2
 8002268:	d0f0      	beq.n	800224c <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800226a:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <HAL_RCC_OscConfig+0x354>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	4a10      	ldr	r2, [pc, #64]	; (80022b0 <HAL_RCC_OscConfig+0x370>)
 8002270:	4013      	ands	r3, r2
 8002272:	0019      	movs	r1, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002278:	4b06      	ldr	r3, [pc, #24]	; (8002294 <HAL_RCC_OscConfig+0x354>)
 800227a:	430a      	orrs	r2, r1
 800227c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800227e:	4b05      	ldr	r3, [pc, #20]	; (8002294 <HAL_RCC_OscConfig+0x354>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	021b      	lsls	r3, r3, #8
 8002284:	0a19      	lsrs	r1, r3, #8
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	061a      	lsls	r2, r3, #24
 800228c:	4b01      	ldr	r3, [pc, #4]	; (8002294 <HAL_RCC_OscConfig+0x354>)
 800228e:	430a      	orrs	r2, r1
 8002290:	605a      	str	r2, [r3, #4]
 8002292:	e029      	b.n	80022e8 <HAL_RCC_OscConfig+0x3a8>
 8002294:	40021000 	.word	0x40021000
 8002298:	fffeffff 	.word	0xfffeffff
 800229c:	fffbffff 	.word	0xfffbffff
 80022a0:	ffffe0ff 	.word	0xffffe0ff
 80022a4:	0800535c 	.word	0x0800535c
 80022a8:	20000010 	.word	0x20000010
 80022ac:	20000014 	.word	0x20000014
 80022b0:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022b4:	4bbd      	ldr	r3, [pc, #756]	; (80025ac <HAL_RCC_OscConfig+0x66c>)
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	4bbc      	ldr	r3, [pc, #752]	; (80025ac <HAL_RCC_OscConfig+0x66c>)
 80022ba:	49bd      	ldr	r1, [pc, #756]	; (80025b0 <HAL_RCC_OscConfig+0x670>)
 80022bc:	400a      	ands	r2, r1
 80022be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c0:	f7fe ff26 	bl	8001110 <HAL_GetTick>
 80022c4:	0003      	movs	r3, r0
 80022c6:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80022c8:	e008      	b.n	80022dc <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022ca:	f7fe ff21 	bl	8001110 <HAL_GetTick>
 80022ce:	0002      	movs	r2, r0
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e1ea      	b.n	80026b2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80022dc:	4bb3      	ldr	r3, [pc, #716]	; (80025ac <HAL_RCC_OscConfig+0x66c>)
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	2380      	movs	r3, #128	; 0x80
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4013      	ands	r3, r2
 80022e6:	d1f0      	bne.n	80022ca <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2208      	movs	r2, #8
 80022ee:	4013      	ands	r3, r2
 80022f0:	d036      	beq.n	8002360 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d019      	beq.n	800232e <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022fa:	4bac      	ldr	r3, [pc, #688]	; (80025ac <HAL_RCC_OscConfig+0x66c>)
 80022fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022fe:	4bab      	ldr	r3, [pc, #684]	; (80025ac <HAL_RCC_OscConfig+0x66c>)
 8002300:	2101      	movs	r1, #1
 8002302:	430a      	orrs	r2, r1
 8002304:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002306:	f7fe ff03 	bl	8001110 <HAL_GetTick>
 800230a:	0003      	movs	r3, r0
 800230c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002310:	f7fe fefe 	bl	8001110 <HAL_GetTick>
 8002314:	0002      	movs	r2, r0
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e1c7      	b.n	80026b2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002322:	4ba2      	ldr	r3, [pc, #648]	; (80025ac <HAL_RCC_OscConfig+0x66c>)
 8002324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002326:	2202      	movs	r2, #2
 8002328:	4013      	ands	r3, r2
 800232a:	d0f1      	beq.n	8002310 <HAL_RCC_OscConfig+0x3d0>
 800232c:	e018      	b.n	8002360 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800232e:	4b9f      	ldr	r3, [pc, #636]	; (80025ac <HAL_RCC_OscConfig+0x66c>)
 8002330:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002332:	4b9e      	ldr	r3, [pc, #632]	; (80025ac <HAL_RCC_OscConfig+0x66c>)
 8002334:	2101      	movs	r1, #1
 8002336:	438a      	bics	r2, r1
 8002338:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233a:	f7fe fee9 	bl	8001110 <HAL_GetTick>
 800233e:	0003      	movs	r3, r0
 8002340:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002344:	f7fe fee4 	bl	8001110 <HAL_GetTick>
 8002348:	0002      	movs	r2, r0
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e1ad      	b.n	80026b2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002356:	4b95      	ldr	r3, [pc, #596]	; (80025ac <HAL_RCC_OscConfig+0x66c>)
 8002358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800235a:	2202      	movs	r2, #2
 800235c:	4013      	ands	r3, r2
 800235e:	d1f1      	bne.n	8002344 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2204      	movs	r2, #4
 8002366:	4013      	ands	r3, r2
 8002368:	d100      	bne.n	800236c <HAL_RCC_OscConfig+0x42c>
 800236a:	e0ae      	b.n	80024ca <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800236c:	2027      	movs	r0, #39	; 0x27
 800236e:	183b      	adds	r3, r7, r0
 8002370:	2200      	movs	r2, #0
 8002372:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002374:	4b8d      	ldr	r3, [pc, #564]	; (80025ac <HAL_RCC_OscConfig+0x66c>)
 8002376:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002378:	2380      	movs	r3, #128	; 0x80
 800237a:	055b      	lsls	r3, r3, #21
 800237c:	4013      	ands	r3, r2
 800237e:	d109      	bne.n	8002394 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002380:	4b8a      	ldr	r3, [pc, #552]	; (80025ac <HAL_RCC_OscConfig+0x66c>)
 8002382:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002384:	4b89      	ldr	r3, [pc, #548]	; (80025ac <HAL_RCC_OscConfig+0x66c>)
 8002386:	2180      	movs	r1, #128	; 0x80
 8002388:	0549      	lsls	r1, r1, #21
 800238a:	430a      	orrs	r2, r1
 800238c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800238e:	183b      	adds	r3, r7, r0
 8002390:	2201      	movs	r2, #1
 8002392:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002394:	4b87      	ldr	r3, [pc, #540]	; (80025b4 <HAL_RCC_OscConfig+0x674>)
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	2380      	movs	r3, #128	; 0x80
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	4013      	ands	r3, r2
 800239e:	d11a      	bne.n	80023d6 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023a0:	4b84      	ldr	r3, [pc, #528]	; (80025b4 <HAL_RCC_OscConfig+0x674>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	4b83      	ldr	r3, [pc, #524]	; (80025b4 <HAL_RCC_OscConfig+0x674>)
 80023a6:	2180      	movs	r1, #128	; 0x80
 80023a8:	0049      	lsls	r1, r1, #1
 80023aa:	430a      	orrs	r2, r1
 80023ac:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ae:	f7fe feaf 	bl	8001110 <HAL_GetTick>
 80023b2:	0003      	movs	r3, r0
 80023b4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023b8:	f7fe feaa 	bl	8001110 <HAL_GetTick>
 80023bc:	0002      	movs	r2, r0
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b64      	cmp	r3, #100	; 0x64
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e173      	b.n	80026b2 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ca:	4b7a      	ldr	r3, [pc, #488]	; (80025b4 <HAL_RCC_OscConfig+0x674>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	2380      	movs	r3, #128	; 0x80
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	4013      	ands	r3, r2
 80023d4:	d0f0      	beq.n	80023b8 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	2380      	movs	r3, #128	; 0x80
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	429a      	cmp	r2, r3
 80023e0:	d107      	bne.n	80023f2 <HAL_RCC_OscConfig+0x4b2>
 80023e2:	4b72      	ldr	r3, [pc, #456]	; (80025ac <HAL_RCC_OscConfig+0x66c>)
 80023e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023e6:	4b71      	ldr	r3, [pc, #452]	; (80025ac <HAL_RCC_OscConfig+0x66c>)
 80023e8:	2180      	movs	r1, #128	; 0x80
 80023ea:	0049      	lsls	r1, r1, #1
 80023ec:	430a      	orrs	r2, r1
 80023ee:	651a      	str	r2, [r3, #80]	; 0x50
 80023f0:	e031      	b.n	8002456 <HAL_RCC_OscConfig+0x516>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10c      	bne.n	8002414 <HAL_RCC_OscConfig+0x4d4>
 80023fa:	4b6c      	ldr	r3, [pc, #432]	; (80025ac <HAL_RCC_OscConfig+0x66c>)
 80023fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023fe:	4b6b      	ldr	r3, [pc, #428]	; (80025ac <HAL_RCC_OscConfig+0x66c>)
 8002400:	496b      	ldr	r1, [pc, #428]	; (80025b0 <HAL_RCC_OscConfig+0x670>)
 8002402:	400a      	ands	r2, r1
 8002404:	651a      	str	r2, [r3, #80]	; 0x50
 8002406:	4b69      	ldr	r3, [pc, #420]	; (80025ac <HAL_RCC_OscConfig+0x66c>)
 8002408:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800240a:	4b68      	ldr	r3, [pc, #416]	; (80025ac <HAL_RCC_OscConfig+0x66c>)
 800240c:	496a      	ldr	r1, [pc, #424]	; (80025b8 <HAL_RCC_OscConfig+0x678>)
 800240e:	400a      	ands	r2, r1
 8002410:	651a      	str	r2, [r3, #80]	; 0x50
 8002412:	e020      	b.n	8002456 <HAL_RCC_OscConfig+0x516>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	23a0      	movs	r3, #160	; 0xa0
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	429a      	cmp	r2, r3
 800241e:	d10e      	bne.n	800243e <HAL_RCC_OscConfig+0x4fe>
 8002420:	4b62      	ldr	r3, [pc, #392]	; (80025ac <HAL_RCC_OscConfig+0x66c>)
 8002422:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002424:	4b61      	ldr	r3, [pc, #388]	; (80025ac <HAL_RCC_OscConfig+0x66c>)
 8002426:	2180      	movs	r1, #128	; 0x80
 8002428:	00c9      	lsls	r1, r1, #3
 800242a:	430a      	orrs	r2, r1
 800242c:	651a      	str	r2, [r3, #80]	; 0x50
 800242e:	4b5f      	ldr	r3, [pc, #380]	; (80025ac <HAL_RCC_OscConfig+0x66c>)
 8002430:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002432:	4b5e      	ldr	r3, [pc, #376]	; (80025ac <HAL_RCC_OscConfig+0x66c>)
 8002434:	2180      	movs	r1, #128	; 0x80
 8002436:	0049      	lsls	r1, r1, #1
 8002438:	430a      	orrs	r2, r1
 800243a:	651a      	str	r2, [r3, #80]	; 0x50
 800243c:	e00b      	b.n	8002456 <HAL_RCC_OscConfig+0x516>
 800243e:	4b5b      	ldr	r3, [pc, #364]	; (80025ac <HAL_RCC_OscConfig+0x66c>)
 8002440:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002442:	4b5a      	ldr	r3, [pc, #360]	; (80025ac <HAL_RCC_OscConfig+0x66c>)
 8002444:	495a      	ldr	r1, [pc, #360]	; (80025b0 <HAL_RCC_OscConfig+0x670>)
 8002446:	400a      	ands	r2, r1
 8002448:	651a      	str	r2, [r3, #80]	; 0x50
 800244a:	4b58      	ldr	r3, [pc, #352]	; (80025ac <HAL_RCC_OscConfig+0x66c>)
 800244c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800244e:	4b57      	ldr	r3, [pc, #348]	; (80025ac <HAL_RCC_OscConfig+0x66c>)
 8002450:	4959      	ldr	r1, [pc, #356]	; (80025b8 <HAL_RCC_OscConfig+0x678>)
 8002452:	400a      	ands	r2, r1
 8002454:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d015      	beq.n	800248a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800245e:	f7fe fe57 	bl	8001110 <HAL_GetTick>
 8002462:	0003      	movs	r3, r0
 8002464:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002466:	e009      	b.n	800247c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002468:	f7fe fe52 	bl	8001110 <HAL_GetTick>
 800246c:	0002      	movs	r2, r0
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	4a52      	ldr	r2, [pc, #328]	; (80025bc <HAL_RCC_OscConfig+0x67c>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e11a      	b.n	80026b2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800247c:	4b4b      	ldr	r3, [pc, #300]	; (80025ac <HAL_RCC_OscConfig+0x66c>)
 800247e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002480:	2380      	movs	r3, #128	; 0x80
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4013      	ands	r3, r2
 8002486:	d0ef      	beq.n	8002468 <HAL_RCC_OscConfig+0x528>
 8002488:	e014      	b.n	80024b4 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248a:	f7fe fe41 	bl	8001110 <HAL_GetTick>
 800248e:	0003      	movs	r3, r0
 8002490:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002492:	e009      	b.n	80024a8 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002494:	f7fe fe3c 	bl	8001110 <HAL_GetTick>
 8002498:	0002      	movs	r2, r0
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	4a47      	ldr	r2, [pc, #284]	; (80025bc <HAL_RCC_OscConfig+0x67c>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e104      	b.n	80026b2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80024a8:	4b40      	ldr	r3, [pc, #256]	; (80025ac <HAL_RCC_OscConfig+0x66c>)
 80024aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024ac:	2380      	movs	r3, #128	; 0x80
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4013      	ands	r3, r2
 80024b2:	d1ef      	bne.n	8002494 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024b4:	2327      	movs	r3, #39	; 0x27
 80024b6:	18fb      	adds	r3, r7, r3
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d105      	bne.n	80024ca <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024be:	4b3b      	ldr	r3, [pc, #236]	; (80025ac <HAL_RCC_OscConfig+0x66c>)
 80024c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024c2:	4b3a      	ldr	r3, [pc, #232]	; (80025ac <HAL_RCC_OscConfig+0x66c>)
 80024c4:	493e      	ldr	r1, [pc, #248]	; (80025c0 <HAL_RCC_OscConfig+0x680>)
 80024c6:	400a      	ands	r2, r1
 80024c8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2220      	movs	r2, #32
 80024d0:	4013      	ands	r3, r2
 80024d2:	d049      	beq.n	8002568 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d026      	beq.n	800252a <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80024dc:	4b33      	ldr	r3, [pc, #204]	; (80025ac <HAL_RCC_OscConfig+0x66c>)
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	4b32      	ldr	r3, [pc, #200]	; (80025ac <HAL_RCC_OscConfig+0x66c>)
 80024e2:	2101      	movs	r1, #1
 80024e4:	430a      	orrs	r2, r1
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	4b30      	ldr	r3, [pc, #192]	; (80025ac <HAL_RCC_OscConfig+0x66c>)
 80024ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024ec:	4b2f      	ldr	r3, [pc, #188]	; (80025ac <HAL_RCC_OscConfig+0x66c>)
 80024ee:	2101      	movs	r1, #1
 80024f0:	430a      	orrs	r2, r1
 80024f2:	635a      	str	r2, [r3, #52]	; 0x34
 80024f4:	4b33      	ldr	r3, [pc, #204]	; (80025c4 <HAL_RCC_OscConfig+0x684>)
 80024f6:	6a1a      	ldr	r2, [r3, #32]
 80024f8:	4b32      	ldr	r3, [pc, #200]	; (80025c4 <HAL_RCC_OscConfig+0x684>)
 80024fa:	2180      	movs	r1, #128	; 0x80
 80024fc:	0189      	lsls	r1, r1, #6
 80024fe:	430a      	orrs	r2, r1
 8002500:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002502:	f7fe fe05 	bl	8001110 <HAL_GetTick>
 8002506:	0003      	movs	r3, r0
 8002508:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800250c:	f7fe fe00 	bl	8001110 <HAL_GetTick>
 8002510:	0002      	movs	r2, r0
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e0c9      	b.n	80026b2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800251e:	4b23      	ldr	r3, [pc, #140]	; (80025ac <HAL_RCC_OscConfig+0x66c>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	2202      	movs	r2, #2
 8002524:	4013      	ands	r3, r2
 8002526:	d0f1      	beq.n	800250c <HAL_RCC_OscConfig+0x5cc>
 8002528:	e01e      	b.n	8002568 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800252a:	4b20      	ldr	r3, [pc, #128]	; (80025ac <HAL_RCC_OscConfig+0x66c>)
 800252c:	689a      	ldr	r2, [r3, #8]
 800252e:	4b1f      	ldr	r3, [pc, #124]	; (80025ac <HAL_RCC_OscConfig+0x66c>)
 8002530:	2101      	movs	r1, #1
 8002532:	438a      	bics	r2, r1
 8002534:	609a      	str	r2, [r3, #8]
 8002536:	4b23      	ldr	r3, [pc, #140]	; (80025c4 <HAL_RCC_OscConfig+0x684>)
 8002538:	6a1a      	ldr	r2, [r3, #32]
 800253a:	4b22      	ldr	r3, [pc, #136]	; (80025c4 <HAL_RCC_OscConfig+0x684>)
 800253c:	4922      	ldr	r1, [pc, #136]	; (80025c8 <HAL_RCC_OscConfig+0x688>)
 800253e:	400a      	ands	r2, r1
 8002540:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002542:	f7fe fde5 	bl	8001110 <HAL_GetTick>
 8002546:	0003      	movs	r3, r0
 8002548:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800254c:	f7fe fde0 	bl	8001110 <HAL_GetTick>
 8002550:	0002      	movs	r2, r0
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e0a9      	b.n	80026b2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800255e:	4b13      	ldr	r3, [pc, #76]	; (80025ac <HAL_RCC_OscConfig+0x66c>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	2202      	movs	r2, #2
 8002564:	4013      	ands	r3, r2
 8002566:	d1f1      	bne.n	800254c <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256c:	2b00      	cmp	r3, #0
 800256e:	d100      	bne.n	8002572 <HAL_RCC_OscConfig+0x632>
 8002570:	e09e      	b.n	80026b0 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002572:	6a3b      	ldr	r3, [r7, #32]
 8002574:	2b0c      	cmp	r3, #12
 8002576:	d100      	bne.n	800257a <HAL_RCC_OscConfig+0x63a>
 8002578:	e077      	b.n	800266a <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257e:	2b02      	cmp	r3, #2
 8002580:	d158      	bne.n	8002634 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002582:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <HAL_RCC_OscConfig+0x66c>)
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	4b09      	ldr	r3, [pc, #36]	; (80025ac <HAL_RCC_OscConfig+0x66c>)
 8002588:	4910      	ldr	r1, [pc, #64]	; (80025cc <HAL_RCC_OscConfig+0x68c>)
 800258a:	400a      	ands	r2, r1
 800258c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258e:	f7fe fdbf 	bl	8001110 <HAL_GetTick>
 8002592:	0003      	movs	r3, r0
 8002594:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002596:	e01b      	b.n	80025d0 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002598:	f7fe fdba 	bl	8001110 <HAL_GetTick>
 800259c:	0002      	movs	r2, r0
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d914      	bls.n	80025d0 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e083      	b.n	80026b2 <HAL_RCC_OscConfig+0x772>
 80025aa:	46c0      	nop			; (mov r8, r8)
 80025ac:	40021000 	.word	0x40021000
 80025b0:	fffffeff 	.word	0xfffffeff
 80025b4:	40007000 	.word	0x40007000
 80025b8:	fffffbff 	.word	0xfffffbff
 80025bc:	00001388 	.word	0x00001388
 80025c0:	efffffff 	.word	0xefffffff
 80025c4:	40010000 	.word	0x40010000
 80025c8:	ffffdfff 	.word	0xffffdfff
 80025cc:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80025d0:	4b3a      	ldr	r3, [pc, #232]	; (80026bc <HAL_RCC_OscConfig+0x77c>)
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	2380      	movs	r3, #128	; 0x80
 80025d6:	049b      	lsls	r3, r3, #18
 80025d8:	4013      	ands	r3, r2
 80025da:	d1dd      	bne.n	8002598 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025dc:	4b37      	ldr	r3, [pc, #220]	; (80026bc <HAL_RCC_OscConfig+0x77c>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	4a37      	ldr	r2, [pc, #220]	; (80026c0 <HAL_RCC_OscConfig+0x780>)
 80025e2:	4013      	ands	r3, r2
 80025e4:	0019      	movs	r1, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f4:	431a      	orrs	r2, r3
 80025f6:	4b31      	ldr	r3, [pc, #196]	; (80026bc <HAL_RCC_OscConfig+0x77c>)
 80025f8:	430a      	orrs	r2, r1
 80025fa:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025fc:	4b2f      	ldr	r3, [pc, #188]	; (80026bc <HAL_RCC_OscConfig+0x77c>)
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	4b2e      	ldr	r3, [pc, #184]	; (80026bc <HAL_RCC_OscConfig+0x77c>)
 8002602:	2180      	movs	r1, #128	; 0x80
 8002604:	0449      	lsls	r1, r1, #17
 8002606:	430a      	orrs	r2, r1
 8002608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260a:	f7fe fd81 	bl	8001110 <HAL_GetTick>
 800260e:	0003      	movs	r3, r0
 8002610:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002614:	f7fe fd7c 	bl	8001110 <HAL_GetTick>
 8002618:	0002      	movs	r2, r0
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e045      	b.n	80026b2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002626:	4b25      	ldr	r3, [pc, #148]	; (80026bc <HAL_RCC_OscConfig+0x77c>)
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	2380      	movs	r3, #128	; 0x80
 800262c:	049b      	lsls	r3, r3, #18
 800262e:	4013      	ands	r3, r2
 8002630:	d0f0      	beq.n	8002614 <HAL_RCC_OscConfig+0x6d4>
 8002632:	e03d      	b.n	80026b0 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002634:	4b21      	ldr	r3, [pc, #132]	; (80026bc <HAL_RCC_OscConfig+0x77c>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	4b20      	ldr	r3, [pc, #128]	; (80026bc <HAL_RCC_OscConfig+0x77c>)
 800263a:	4922      	ldr	r1, [pc, #136]	; (80026c4 <HAL_RCC_OscConfig+0x784>)
 800263c:	400a      	ands	r2, r1
 800263e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002640:	f7fe fd66 	bl	8001110 <HAL_GetTick>
 8002644:	0003      	movs	r3, r0
 8002646:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800264a:	f7fe fd61 	bl	8001110 <HAL_GetTick>
 800264e:	0002      	movs	r2, r0
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e02a      	b.n	80026b2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800265c:	4b17      	ldr	r3, [pc, #92]	; (80026bc <HAL_RCC_OscConfig+0x77c>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	2380      	movs	r3, #128	; 0x80
 8002662:	049b      	lsls	r3, r3, #18
 8002664:	4013      	ands	r3, r2
 8002666:	d1f0      	bne.n	800264a <HAL_RCC_OscConfig+0x70a>
 8002668:	e022      	b.n	80026b0 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266e:	2b01      	cmp	r3, #1
 8002670:	d101      	bne.n	8002676 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e01d      	b.n	80026b2 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002676:	4b11      	ldr	r3, [pc, #68]	; (80026bc <HAL_RCC_OscConfig+0x77c>)
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800267c:	69fa      	ldr	r2, [r7, #28]
 800267e:	2380      	movs	r3, #128	; 0x80
 8002680:	025b      	lsls	r3, r3, #9
 8002682:	401a      	ands	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002688:	429a      	cmp	r2, r3
 800268a:	d10f      	bne.n	80026ac <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800268c:	69fa      	ldr	r2, [r7, #28]
 800268e:	23f0      	movs	r3, #240	; 0xf0
 8002690:	039b      	lsls	r3, r3, #14
 8002692:	401a      	ands	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002698:	429a      	cmp	r2, r3
 800269a:	d107      	bne.n	80026ac <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800269c:	69fa      	ldr	r2, [r7, #28]
 800269e:	23c0      	movs	r3, #192	; 0xc0
 80026a0:	041b      	lsls	r3, r3, #16
 80026a2:	401a      	ands	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d001      	beq.n	80026b0 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e000      	b.n	80026b2 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	0018      	movs	r0, r3
 80026b4:	46bd      	mov	sp, r7
 80026b6:	b00a      	add	sp, #40	; 0x28
 80026b8:	bdb0      	pop	{r4, r5, r7, pc}
 80026ba:	46c0      	nop			; (mov r8, r8)
 80026bc:	40021000 	.word	0x40021000
 80026c0:	ff02ffff 	.word	0xff02ffff
 80026c4:	feffffff 	.word	0xfeffffff

080026c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026c8:	b5b0      	push	{r4, r5, r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e128      	b.n	800292e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026dc:	4b96      	ldr	r3, [pc, #600]	; (8002938 <HAL_RCC_ClockConfig+0x270>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2201      	movs	r2, #1
 80026e2:	4013      	ands	r3, r2
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d91e      	bls.n	8002728 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ea:	4b93      	ldr	r3, [pc, #588]	; (8002938 <HAL_RCC_ClockConfig+0x270>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2201      	movs	r2, #1
 80026f0:	4393      	bics	r3, r2
 80026f2:	0019      	movs	r1, r3
 80026f4:	4b90      	ldr	r3, [pc, #576]	; (8002938 <HAL_RCC_ClockConfig+0x270>)
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80026fc:	f7fe fd08 	bl	8001110 <HAL_GetTick>
 8002700:	0003      	movs	r3, r0
 8002702:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002704:	e009      	b.n	800271a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002706:	f7fe fd03 	bl	8001110 <HAL_GetTick>
 800270a:	0002      	movs	r2, r0
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	4a8a      	ldr	r2, [pc, #552]	; (800293c <HAL_RCC_ClockConfig+0x274>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d901      	bls.n	800271a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e109      	b.n	800292e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800271a:	4b87      	ldr	r3, [pc, #540]	; (8002938 <HAL_RCC_ClockConfig+0x270>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2201      	movs	r2, #1
 8002720:	4013      	ands	r3, r2
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	429a      	cmp	r2, r3
 8002726:	d1ee      	bne.n	8002706 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2202      	movs	r2, #2
 800272e:	4013      	ands	r3, r2
 8002730:	d009      	beq.n	8002746 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002732:	4b83      	ldr	r3, [pc, #524]	; (8002940 <HAL_RCC_ClockConfig+0x278>)
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	22f0      	movs	r2, #240	; 0xf0
 8002738:	4393      	bics	r3, r2
 800273a:	0019      	movs	r1, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	4b7f      	ldr	r3, [pc, #508]	; (8002940 <HAL_RCC_ClockConfig+0x278>)
 8002742:	430a      	orrs	r2, r1
 8002744:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2201      	movs	r2, #1
 800274c:	4013      	ands	r3, r2
 800274e:	d100      	bne.n	8002752 <HAL_RCC_ClockConfig+0x8a>
 8002750:	e089      	b.n	8002866 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2b02      	cmp	r3, #2
 8002758:	d107      	bne.n	800276a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800275a:	4b79      	ldr	r3, [pc, #484]	; (8002940 <HAL_RCC_ClockConfig+0x278>)
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	2380      	movs	r3, #128	; 0x80
 8002760:	029b      	lsls	r3, r3, #10
 8002762:	4013      	ands	r3, r2
 8002764:	d120      	bne.n	80027a8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e0e1      	b.n	800292e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b03      	cmp	r3, #3
 8002770:	d107      	bne.n	8002782 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002772:	4b73      	ldr	r3, [pc, #460]	; (8002940 <HAL_RCC_ClockConfig+0x278>)
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	2380      	movs	r3, #128	; 0x80
 8002778:	049b      	lsls	r3, r3, #18
 800277a:	4013      	ands	r3, r2
 800277c:	d114      	bne.n	80027a8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e0d5      	b.n	800292e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d106      	bne.n	8002798 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800278a:	4b6d      	ldr	r3, [pc, #436]	; (8002940 <HAL_RCC_ClockConfig+0x278>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2204      	movs	r2, #4
 8002790:	4013      	ands	r3, r2
 8002792:	d109      	bne.n	80027a8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e0ca      	b.n	800292e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002798:	4b69      	ldr	r3, [pc, #420]	; (8002940 <HAL_RCC_ClockConfig+0x278>)
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	2380      	movs	r3, #128	; 0x80
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4013      	ands	r3, r2
 80027a2:	d101      	bne.n	80027a8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e0c2      	b.n	800292e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027a8:	4b65      	ldr	r3, [pc, #404]	; (8002940 <HAL_RCC_ClockConfig+0x278>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	2203      	movs	r2, #3
 80027ae:	4393      	bics	r3, r2
 80027b0:	0019      	movs	r1, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	4b62      	ldr	r3, [pc, #392]	; (8002940 <HAL_RCC_ClockConfig+0x278>)
 80027b8:	430a      	orrs	r2, r1
 80027ba:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027bc:	f7fe fca8 	bl	8001110 <HAL_GetTick>
 80027c0:	0003      	movs	r3, r0
 80027c2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d111      	bne.n	80027f0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80027cc:	e009      	b.n	80027e2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ce:	f7fe fc9f 	bl	8001110 <HAL_GetTick>
 80027d2:	0002      	movs	r2, r0
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	4a58      	ldr	r2, [pc, #352]	; (800293c <HAL_RCC_ClockConfig+0x274>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e0a5      	b.n	800292e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80027e2:	4b57      	ldr	r3, [pc, #348]	; (8002940 <HAL_RCC_ClockConfig+0x278>)
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	220c      	movs	r2, #12
 80027e8:	4013      	ands	r3, r2
 80027ea:	2b08      	cmp	r3, #8
 80027ec:	d1ef      	bne.n	80027ce <HAL_RCC_ClockConfig+0x106>
 80027ee:	e03a      	b.n	8002866 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	2b03      	cmp	r3, #3
 80027f6:	d111      	bne.n	800281c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027f8:	e009      	b.n	800280e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027fa:	f7fe fc89 	bl	8001110 <HAL_GetTick>
 80027fe:	0002      	movs	r2, r0
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	4a4d      	ldr	r2, [pc, #308]	; (800293c <HAL_RCC_ClockConfig+0x274>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d901      	bls.n	800280e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e08f      	b.n	800292e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800280e:	4b4c      	ldr	r3, [pc, #304]	; (8002940 <HAL_RCC_ClockConfig+0x278>)
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	220c      	movs	r2, #12
 8002814:	4013      	ands	r3, r2
 8002816:	2b0c      	cmp	r3, #12
 8002818:	d1ef      	bne.n	80027fa <HAL_RCC_ClockConfig+0x132>
 800281a:	e024      	b.n	8002866 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d11b      	bne.n	800285c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002824:	e009      	b.n	800283a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002826:	f7fe fc73 	bl	8001110 <HAL_GetTick>
 800282a:	0002      	movs	r2, r0
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	4a42      	ldr	r2, [pc, #264]	; (800293c <HAL_RCC_ClockConfig+0x274>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d901      	bls.n	800283a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e079      	b.n	800292e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800283a:	4b41      	ldr	r3, [pc, #260]	; (8002940 <HAL_RCC_ClockConfig+0x278>)
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	220c      	movs	r2, #12
 8002840:	4013      	ands	r3, r2
 8002842:	2b04      	cmp	r3, #4
 8002844:	d1ef      	bne.n	8002826 <HAL_RCC_ClockConfig+0x15e>
 8002846:	e00e      	b.n	8002866 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002848:	f7fe fc62 	bl	8001110 <HAL_GetTick>
 800284c:	0002      	movs	r2, r0
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	4a3a      	ldr	r2, [pc, #232]	; (800293c <HAL_RCC_ClockConfig+0x274>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d901      	bls.n	800285c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e068      	b.n	800292e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800285c:	4b38      	ldr	r3, [pc, #224]	; (8002940 <HAL_RCC_ClockConfig+0x278>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	220c      	movs	r2, #12
 8002862:	4013      	ands	r3, r2
 8002864:	d1f0      	bne.n	8002848 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002866:	4b34      	ldr	r3, [pc, #208]	; (8002938 <HAL_RCC_ClockConfig+0x270>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2201      	movs	r2, #1
 800286c:	4013      	ands	r3, r2
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	429a      	cmp	r2, r3
 8002872:	d21e      	bcs.n	80028b2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002874:	4b30      	ldr	r3, [pc, #192]	; (8002938 <HAL_RCC_ClockConfig+0x270>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2201      	movs	r2, #1
 800287a:	4393      	bics	r3, r2
 800287c:	0019      	movs	r1, r3
 800287e:	4b2e      	ldr	r3, [pc, #184]	; (8002938 <HAL_RCC_ClockConfig+0x270>)
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	430a      	orrs	r2, r1
 8002884:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002886:	f7fe fc43 	bl	8001110 <HAL_GetTick>
 800288a:	0003      	movs	r3, r0
 800288c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800288e:	e009      	b.n	80028a4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002890:	f7fe fc3e 	bl	8001110 <HAL_GetTick>
 8002894:	0002      	movs	r2, r0
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	4a28      	ldr	r2, [pc, #160]	; (800293c <HAL_RCC_ClockConfig+0x274>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e044      	b.n	800292e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a4:	4b24      	ldr	r3, [pc, #144]	; (8002938 <HAL_RCC_ClockConfig+0x270>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2201      	movs	r2, #1
 80028aa:	4013      	ands	r3, r2
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d1ee      	bne.n	8002890 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2204      	movs	r2, #4
 80028b8:	4013      	ands	r3, r2
 80028ba:	d009      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028bc:	4b20      	ldr	r3, [pc, #128]	; (8002940 <HAL_RCC_ClockConfig+0x278>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	4a20      	ldr	r2, [pc, #128]	; (8002944 <HAL_RCC_ClockConfig+0x27c>)
 80028c2:	4013      	ands	r3, r2
 80028c4:	0019      	movs	r1, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68da      	ldr	r2, [r3, #12]
 80028ca:	4b1d      	ldr	r3, [pc, #116]	; (8002940 <HAL_RCC_ClockConfig+0x278>)
 80028cc:	430a      	orrs	r2, r1
 80028ce:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2208      	movs	r2, #8
 80028d6:	4013      	ands	r3, r2
 80028d8:	d00a      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028da:	4b19      	ldr	r3, [pc, #100]	; (8002940 <HAL_RCC_ClockConfig+0x278>)
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	4a1a      	ldr	r2, [pc, #104]	; (8002948 <HAL_RCC_ClockConfig+0x280>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	0019      	movs	r1, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	00da      	lsls	r2, r3, #3
 80028ea:	4b15      	ldr	r3, [pc, #84]	; (8002940 <HAL_RCC_ClockConfig+0x278>)
 80028ec:	430a      	orrs	r2, r1
 80028ee:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028f0:	f000 f832 	bl	8002958 <HAL_RCC_GetSysClockFreq>
 80028f4:	0001      	movs	r1, r0
 80028f6:	4b12      	ldr	r3, [pc, #72]	; (8002940 <HAL_RCC_ClockConfig+0x278>)
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	091b      	lsrs	r3, r3, #4
 80028fc:	220f      	movs	r2, #15
 80028fe:	4013      	ands	r3, r2
 8002900:	4a12      	ldr	r2, [pc, #72]	; (800294c <HAL_RCC_ClockConfig+0x284>)
 8002902:	5cd3      	ldrb	r3, [r2, r3]
 8002904:	000a      	movs	r2, r1
 8002906:	40da      	lsrs	r2, r3
 8002908:	4b11      	ldr	r3, [pc, #68]	; (8002950 <HAL_RCC_ClockConfig+0x288>)
 800290a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800290c:	4b11      	ldr	r3, [pc, #68]	; (8002954 <HAL_RCC_ClockConfig+0x28c>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	250b      	movs	r5, #11
 8002912:	197c      	adds	r4, r7, r5
 8002914:	0018      	movs	r0, r3
 8002916:	f7fe fbb5 	bl	8001084 <HAL_InitTick>
 800291a:	0003      	movs	r3, r0
 800291c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800291e:	197b      	adds	r3, r7, r5
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d002      	beq.n	800292c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002926:	197b      	adds	r3, r7, r5
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	e000      	b.n	800292e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	0018      	movs	r0, r3
 8002930:	46bd      	mov	sp, r7
 8002932:	b004      	add	sp, #16
 8002934:	bdb0      	pop	{r4, r5, r7, pc}
 8002936:	46c0      	nop			; (mov r8, r8)
 8002938:	40022000 	.word	0x40022000
 800293c:	00001388 	.word	0x00001388
 8002940:	40021000 	.word	0x40021000
 8002944:	fffff8ff 	.word	0xfffff8ff
 8002948:	ffffc7ff 	.word	0xffffc7ff
 800294c:	0800535c 	.word	0x0800535c
 8002950:	20000010 	.word	0x20000010
 8002954:	20000014 	.word	0x20000014

08002958 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002958:	b5b0      	push	{r4, r5, r7, lr}
 800295a:	b08e      	sub	sp, #56	; 0x38
 800295c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800295e:	4b4c      	ldr	r3, [pc, #304]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x138>)
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002964:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002966:	230c      	movs	r3, #12
 8002968:	4013      	ands	r3, r2
 800296a:	2b0c      	cmp	r3, #12
 800296c:	d014      	beq.n	8002998 <HAL_RCC_GetSysClockFreq+0x40>
 800296e:	d900      	bls.n	8002972 <HAL_RCC_GetSysClockFreq+0x1a>
 8002970:	e07b      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0x112>
 8002972:	2b04      	cmp	r3, #4
 8002974:	d002      	beq.n	800297c <HAL_RCC_GetSysClockFreq+0x24>
 8002976:	2b08      	cmp	r3, #8
 8002978:	d00b      	beq.n	8002992 <HAL_RCC_GetSysClockFreq+0x3a>
 800297a:	e076      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800297c:	4b44      	ldr	r3, [pc, #272]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x138>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2210      	movs	r2, #16
 8002982:	4013      	ands	r3, r2
 8002984:	d002      	beq.n	800298c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002986:	4b43      	ldr	r3, [pc, #268]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002988:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800298a:	e07c      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800298c:	4b42      	ldr	r3, [pc, #264]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x140>)
 800298e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002990:	e079      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002992:	4b42      	ldr	r3, [pc, #264]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x144>)
 8002994:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002996:	e076      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299a:	0c9a      	lsrs	r2, r3, #18
 800299c:	230f      	movs	r3, #15
 800299e:	401a      	ands	r2, r3
 80029a0:	4b3f      	ldr	r3, [pc, #252]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x148>)
 80029a2:	5c9b      	ldrb	r3, [r3, r2]
 80029a4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80029a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a8:	0d9a      	lsrs	r2, r3, #22
 80029aa:	2303      	movs	r3, #3
 80029ac:	4013      	ands	r3, r2
 80029ae:	3301      	adds	r3, #1
 80029b0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029b2:	4b37      	ldr	r3, [pc, #220]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x138>)
 80029b4:	68da      	ldr	r2, [r3, #12]
 80029b6:	2380      	movs	r3, #128	; 0x80
 80029b8:	025b      	lsls	r3, r3, #9
 80029ba:	4013      	ands	r3, r2
 80029bc:	d01a      	beq.n	80029f4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80029be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c0:	61bb      	str	r3, [r7, #24]
 80029c2:	2300      	movs	r3, #0
 80029c4:	61fb      	str	r3, [r7, #28]
 80029c6:	4a35      	ldr	r2, [pc, #212]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x144>)
 80029c8:	2300      	movs	r3, #0
 80029ca:	69b8      	ldr	r0, [r7, #24]
 80029cc:	69f9      	ldr	r1, [r7, #28]
 80029ce:	f7fd fc47 	bl	8000260 <__aeabi_lmul>
 80029d2:	0002      	movs	r2, r0
 80029d4:	000b      	movs	r3, r1
 80029d6:	0010      	movs	r0, r2
 80029d8:	0019      	movs	r1, r3
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	613b      	str	r3, [r7, #16]
 80029de:	2300      	movs	r3, #0
 80029e0:	617b      	str	r3, [r7, #20]
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	f7fd fc1b 	bl	8000220 <__aeabi_uldivmod>
 80029ea:	0002      	movs	r2, r0
 80029ec:	000b      	movs	r3, r1
 80029ee:	0013      	movs	r3, r2
 80029f0:	637b      	str	r3, [r7, #52]	; 0x34
 80029f2:	e037      	b.n	8002a64 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80029f4:	4b26      	ldr	r3, [pc, #152]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x138>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2210      	movs	r2, #16
 80029fa:	4013      	ands	r3, r2
 80029fc:	d01a      	beq.n	8002a34 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80029fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a00:	60bb      	str	r3, [r7, #8]
 8002a02:	2300      	movs	r3, #0
 8002a04:	60fb      	str	r3, [r7, #12]
 8002a06:	4a23      	ldr	r2, [pc, #140]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002a08:	2300      	movs	r3, #0
 8002a0a:	68b8      	ldr	r0, [r7, #8]
 8002a0c:	68f9      	ldr	r1, [r7, #12]
 8002a0e:	f7fd fc27 	bl	8000260 <__aeabi_lmul>
 8002a12:	0002      	movs	r2, r0
 8002a14:	000b      	movs	r3, r1
 8002a16:	0010      	movs	r0, r2
 8002a18:	0019      	movs	r1, r3
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	603b      	str	r3, [r7, #0]
 8002a1e:	2300      	movs	r3, #0
 8002a20:	607b      	str	r3, [r7, #4]
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f7fd fbfb 	bl	8000220 <__aeabi_uldivmod>
 8002a2a:	0002      	movs	r2, r0
 8002a2c:	000b      	movs	r3, r1
 8002a2e:	0013      	movs	r3, r2
 8002a30:	637b      	str	r3, [r7, #52]	; 0x34
 8002a32:	e017      	b.n	8002a64 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a36:	0018      	movs	r0, r3
 8002a38:	2300      	movs	r3, #0
 8002a3a:	0019      	movs	r1, r3
 8002a3c:	4a16      	ldr	r2, [pc, #88]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x140>)
 8002a3e:	2300      	movs	r3, #0
 8002a40:	f7fd fc0e 	bl	8000260 <__aeabi_lmul>
 8002a44:	0002      	movs	r2, r0
 8002a46:	000b      	movs	r3, r1
 8002a48:	0010      	movs	r0, r2
 8002a4a:	0019      	movs	r1, r3
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	001c      	movs	r4, r3
 8002a50:	2300      	movs	r3, #0
 8002a52:	001d      	movs	r5, r3
 8002a54:	0022      	movs	r2, r4
 8002a56:	002b      	movs	r3, r5
 8002a58:	f7fd fbe2 	bl	8000220 <__aeabi_uldivmod>
 8002a5c:	0002      	movs	r2, r0
 8002a5e:	000b      	movs	r3, r1
 8002a60:	0013      	movs	r3, r2
 8002a62:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a66:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002a68:	e00d      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002a6a:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x138>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	0b5b      	lsrs	r3, r3, #13
 8002a70:	2207      	movs	r2, #7
 8002a72:	4013      	ands	r3, r2
 8002a74:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	2280      	movs	r2, #128	; 0x80
 8002a7c:	0212      	lsls	r2, r2, #8
 8002a7e:	409a      	lsls	r2, r3
 8002a80:	0013      	movs	r3, r2
 8002a82:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002a84:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002a88:	0018      	movs	r0, r3
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	b00e      	add	sp, #56	; 0x38
 8002a8e:	bdb0      	pop	{r4, r5, r7, pc}
 8002a90:	40021000 	.word	0x40021000
 8002a94:	003d0900 	.word	0x003d0900
 8002a98:	00f42400 	.word	0x00f42400
 8002a9c:	007a1200 	.word	0x007a1200
 8002aa0:	0800536c 	.word	0x0800536c

08002aa4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002aac:	2317      	movs	r3, #23
 8002aae:	18fb      	adds	r3, r7, r3
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2220      	movs	r2, #32
 8002aba:	4013      	ands	r3, r2
 8002abc:	d106      	bne.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	2380      	movs	r3, #128	; 0x80
 8002ac4:	011b      	lsls	r3, r3, #4
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	d100      	bne.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002aca:	e104      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002acc:	4bb1      	ldr	r3, [pc, #708]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ace:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ad0:	2380      	movs	r3, #128	; 0x80
 8002ad2:	055b      	lsls	r3, r3, #21
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	d10a      	bne.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ad8:	4bae      	ldr	r3, [pc, #696]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ada:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002adc:	4bad      	ldr	r3, [pc, #692]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ade:	2180      	movs	r1, #128	; 0x80
 8002ae0:	0549      	lsls	r1, r1, #21
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002ae6:	2317      	movs	r3, #23
 8002ae8:	18fb      	adds	r3, r7, r3
 8002aea:	2201      	movs	r2, #1
 8002aec:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aee:	4baa      	ldr	r3, [pc, #680]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	2380      	movs	r3, #128	; 0x80
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	4013      	ands	r3, r2
 8002af8:	d11a      	bne.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002afa:	4ba7      	ldr	r3, [pc, #668]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	4ba6      	ldr	r3, [pc, #664]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b00:	2180      	movs	r1, #128	; 0x80
 8002b02:	0049      	lsls	r1, r1, #1
 8002b04:	430a      	orrs	r2, r1
 8002b06:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b08:	f7fe fb02 	bl	8001110 <HAL_GetTick>
 8002b0c:	0003      	movs	r3, r0
 8002b0e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b10:	e008      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b12:	f7fe fafd 	bl	8001110 <HAL_GetTick>
 8002b16:	0002      	movs	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b64      	cmp	r3, #100	; 0x64
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e133      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b24:	4b9c      	ldr	r3, [pc, #624]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	2380      	movs	r3, #128	; 0x80
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	d0f0      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002b30:	4b98      	ldr	r3, [pc, #608]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	23c0      	movs	r3, #192	; 0xc0
 8002b36:	039b      	lsls	r3, r3, #14
 8002b38:	4013      	ands	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	23c0      	movs	r3, #192	; 0xc0
 8002b42:	039b      	lsls	r3, r3, #14
 8002b44:	4013      	ands	r3, r2
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d107      	bne.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	23c0      	movs	r3, #192	; 0xc0
 8002b52:	039b      	lsls	r3, r3, #14
 8002b54:	4013      	ands	r3, r2
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d013      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	23c0      	movs	r3, #192	; 0xc0
 8002b62:	029b      	lsls	r3, r3, #10
 8002b64:	401a      	ands	r2, r3
 8002b66:	23c0      	movs	r3, #192	; 0xc0
 8002b68:	029b      	lsls	r3, r3, #10
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d10a      	bne.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002b6e:	4b89      	ldr	r3, [pc, #548]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	2380      	movs	r3, #128	; 0x80
 8002b74:	029b      	lsls	r3, r3, #10
 8002b76:	401a      	ands	r2, r3
 8002b78:	2380      	movs	r3, #128	; 0x80
 8002b7a:	029b      	lsls	r3, r3, #10
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d101      	bne.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e103      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002b84:	4b83      	ldr	r3, [pc, #524]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b88:	23c0      	movs	r3, #192	; 0xc0
 8002b8a:	029b      	lsls	r3, r3, #10
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d049      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	23c0      	movs	r3, #192	; 0xc0
 8002b9c:	029b      	lsls	r3, r3, #10
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d004      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2220      	movs	r2, #32
 8002bac:	4013      	ands	r3, r2
 8002bae:	d10d      	bne.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	23c0      	movs	r3, #192	; 0xc0
 8002bb6:	029b      	lsls	r3, r3, #10
 8002bb8:	4013      	ands	r3, r2
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d034      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	2380      	movs	r3, #128	; 0x80
 8002bc6:	011b      	lsls	r3, r3, #4
 8002bc8:	4013      	ands	r3, r2
 8002bca:	d02e      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002bcc:	4b71      	ldr	r3, [pc, #452]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bd0:	4a72      	ldr	r2, [pc, #456]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bd6:	4b6f      	ldr	r3, [pc, #444]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002bd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bda:	4b6e      	ldr	r3, [pc, #440]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002bdc:	2180      	movs	r1, #128	; 0x80
 8002bde:	0309      	lsls	r1, r1, #12
 8002be0:	430a      	orrs	r2, r1
 8002be2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002be4:	4b6b      	ldr	r3, [pc, #428]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002be6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002be8:	4b6a      	ldr	r3, [pc, #424]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002bea:	496d      	ldr	r1, [pc, #436]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002bec:	400a      	ands	r2, r1
 8002bee:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002bf0:	4b68      	ldr	r3, [pc, #416]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	2380      	movs	r3, #128	; 0x80
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	d014      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c00:	f7fe fa86 	bl	8001110 <HAL_GetTick>
 8002c04:	0003      	movs	r3, r0
 8002c06:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c08:	e009      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c0a:	f7fe fa81 	bl	8001110 <HAL_GetTick>
 8002c0e:	0002      	movs	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	4a63      	ldr	r2, [pc, #396]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e0b6      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c1e:	4b5d      	ldr	r3, [pc, #372]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c22:	2380      	movs	r3, #128	; 0x80
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4013      	ands	r3, r2
 8002c28:	d0ef      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	2380      	movs	r3, #128	; 0x80
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	4013      	ands	r3, r2
 8002c34:	d01f      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689a      	ldr	r2, [r3, #8]
 8002c3a:	23c0      	movs	r3, #192	; 0xc0
 8002c3c:	029b      	lsls	r3, r3, #10
 8002c3e:	401a      	ands	r2, r3
 8002c40:	23c0      	movs	r3, #192	; 0xc0
 8002c42:	029b      	lsls	r3, r3, #10
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d10c      	bne.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002c48:	4b52      	ldr	r3, [pc, #328]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a56      	ldr	r2, [pc, #344]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c4e:	4013      	ands	r3, r2
 8002c50:	0019      	movs	r1, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689a      	ldr	r2, [r3, #8]
 8002c56:	23c0      	movs	r3, #192	; 0xc0
 8002c58:	039b      	lsls	r3, r3, #14
 8002c5a:	401a      	ands	r2, r3
 8002c5c:	4b4d      	ldr	r3, [pc, #308]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	4b4c      	ldr	r3, [pc, #304]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c64:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	23c0      	movs	r3, #192	; 0xc0
 8002c6c:	029b      	lsls	r3, r3, #10
 8002c6e:	401a      	ands	r2, r3
 8002c70:	4b48      	ldr	r3, [pc, #288]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c72:	430a      	orrs	r2, r1
 8002c74:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d01f      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	23c0      	movs	r3, #192	; 0xc0
 8002c86:	029b      	lsls	r3, r3, #10
 8002c88:	401a      	ands	r2, r3
 8002c8a:	23c0      	movs	r3, #192	; 0xc0
 8002c8c:	029b      	lsls	r3, r3, #10
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d10c      	bne.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x208>
 8002c92:	4b40      	ldr	r3, [pc, #256]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a44      	ldr	r2, [pc, #272]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c98:	4013      	ands	r3, r2
 8002c9a:	0019      	movs	r1, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	23c0      	movs	r3, #192	; 0xc0
 8002ca2:	039b      	lsls	r3, r3, #14
 8002ca4:	401a      	ands	r2, r3
 8002ca6:	4b3b      	ldr	r3, [pc, #236]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	4b39      	ldr	r3, [pc, #228]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002cae:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	23c0      	movs	r3, #192	; 0xc0
 8002cb6:	029b      	lsls	r3, r3, #10
 8002cb8:	401a      	ands	r2, r3
 8002cba:	4b36      	ldr	r3, [pc, #216]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002cc0:	2317      	movs	r3, #23
 8002cc2:	18fb      	adds	r3, r7, r3
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d105      	bne.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cca:	4b32      	ldr	r3, [pc, #200]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ccc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cce:	4b31      	ldr	r3, [pc, #196]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002cd0:	4936      	ldr	r1, [pc, #216]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002cd2:	400a      	ands	r2, r1
 8002cd4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	4013      	ands	r3, r2
 8002cde:	d009      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ce0:	4b2c      	ldr	r3, [pc, #176]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce4:	2203      	movs	r2, #3
 8002ce6:	4393      	bics	r3, r2
 8002ce8:	0019      	movs	r1, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68da      	ldr	r2, [r3, #12]
 8002cee:	4b29      	ldr	r3, [pc, #164]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	d009      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cfe:	4b25      	ldr	r3, [pc, #148]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d02:	220c      	movs	r2, #12
 8002d04:	4393      	bics	r3, r2
 8002d06:	0019      	movs	r1, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691a      	ldr	r2, [r3, #16]
 8002d0c:	4b21      	ldr	r3, [pc, #132]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2204      	movs	r2, #4
 8002d18:	4013      	ands	r3, r2
 8002d1a:	d009      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d1c:	4b1d      	ldr	r3, [pc, #116]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d20:	4a23      	ldr	r2, [pc, #140]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8002d22:	4013      	ands	r3, r2
 8002d24:	0019      	movs	r1, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695a      	ldr	r2, [r3, #20]
 8002d2a:	4b1a      	ldr	r3, [pc, #104]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2208      	movs	r2, #8
 8002d36:	4013      	ands	r3, r2
 8002d38:	d009      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d3a:	4b16      	ldr	r3, [pc, #88]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d3e:	4a1d      	ldr	r2, [pc, #116]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d40:	4013      	ands	r3, r2
 8002d42:	0019      	movs	r1, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	699a      	ldr	r2, [r3, #24]
 8002d48:	4b12      	ldr	r3, [pc, #72]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2240      	movs	r2, #64	; 0x40
 8002d54:	4013      	ands	r3, r2
 8002d56:	d009      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d58:	4b0e      	ldr	r3, [pc, #56]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d5c:	4a16      	ldr	r2, [pc, #88]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002d5e:	4013      	ands	r3, r2
 8002d60:	0019      	movs	r1, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a1a      	ldr	r2, [r3, #32]
 8002d66:	4b0b      	ldr	r3, [pc, #44]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2280      	movs	r2, #128	; 0x80
 8002d72:	4013      	ands	r3, r2
 8002d74:	d009      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002d76:	4b07      	ldr	r3, [pc, #28]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d7a:	4a10      	ldr	r2, [pc, #64]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	0019      	movs	r1, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	69da      	ldr	r2, [r3, #28]
 8002d84:	4b03      	ldr	r3, [pc, #12]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d86:	430a      	orrs	r2, r1
 8002d88:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	b006      	add	sp, #24
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40021000 	.word	0x40021000
 8002d98:	40007000 	.word	0x40007000
 8002d9c:	fffcffff 	.word	0xfffcffff
 8002da0:	fff7ffff 	.word	0xfff7ffff
 8002da4:	00001388 	.word	0x00001388
 8002da8:	ffcfffff 	.word	0xffcfffff
 8002dac:	efffffff 	.word	0xefffffff
 8002db0:	fffff3ff 	.word	0xfffff3ff
 8002db4:	ffffcfff 	.word	0xffffcfff
 8002db8:	fbffffff 	.word	0xfbffffff
 8002dbc:	fff3ffff 	.word	0xfff3ffff

08002dc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e032      	b.n	8002e38 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2239      	movs	r2, #57	; 0x39
 8002dd6:	5c9b      	ldrb	r3, [r3, r2]
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d107      	bne.n	8002dee <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2238      	movs	r2, #56	; 0x38
 8002de2:	2100      	movs	r1, #0
 8002de4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	0018      	movs	r0, r3
 8002dea:	f7fe f893 	bl	8000f14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2239      	movs	r2, #57	; 0x39
 8002df2:	2102      	movs	r1, #2
 8002df4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	0019      	movs	r1, r3
 8002e00:	0010      	movs	r0, r2
 8002e02:	f000 fa8b 	bl	800331c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	223e      	movs	r2, #62	; 0x3e
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	223a      	movs	r2, #58	; 0x3a
 8002e12:	2101      	movs	r1, #1
 8002e14:	5499      	strb	r1, [r3, r2]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	223b      	movs	r2, #59	; 0x3b
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	5499      	strb	r1, [r3, r2]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	223c      	movs	r2, #60	; 0x3c
 8002e22:	2101      	movs	r1, #1
 8002e24:	5499      	strb	r1, [r3, r2]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	223d      	movs	r2, #61	; 0x3d
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2239      	movs	r2, #57	; 0x39
 8002e32:	2101      	movs	r1, #1
 8002e34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	0018      	movs	r0, r3
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	b002      	add	sp, #8
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e032      	b.n	8002eb8 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2239      	movs	r2, #57	; 0x39
 8002e56:	5c9b      	ldrb	r3, [r3, r2]
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d107      	bne.n	8002e6e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2238      	movs	r2, #56	; 0x38
 8002e62:	2100      	movs	r1, #0
 8002e64:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	0018      	movs	r0, r3
 8002e6a:	f000 f829 	bl	8002ec0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2239      	movs	r2, #57	; 0x39
 8002e72:	2102      	movs	r1, #2
 8002e74:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	3304      	adds	r3, #4
 8002e7e:	0019      	movs	r1, r3
 8002e80:	0010      	movs	r0, r2
 8002e82:	f000 fa4b 	bl	800331c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	223e      	movs	r2, #62	; 0x3e
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	223a      	movs	r2, #58	; 0x3a
 8002e92:	2101      	movs	r1, #1
 8002e94:	5499      	strb	r1, [r3, r2]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	223b      	movs	r2, #59	; 0x3b
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	5499      	strb	r1, [r3, r2]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	223c      	movs	r2, #60	; 0x3c
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	5499      	strb	r1, [r3, r2]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	223d      	movs	r2, #61	; 0x3d
 8002eaa:	2101      	movs	r1, #1
 8002eac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2239      	movs	r2, #57	; 0x39
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	0018      	movs	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	b002      	add	sp, #8
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ec8:	46c0      	nop			; (mov r8, r8)
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	b002      	add	sp, #8
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d108      	bne.n	8002ef2 <HAL_TIM_PWM_Start+0x22>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	223a      	movs	r2, #58	; 0x3a
 8002ee4:	5c9b      	ldrb	r3, [r3, r2]
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	1e5a      	subs	r2, r3, #1
 8002eec:	4193      	sbcs	r3, r2
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	e01f      	b.n	8002f32 <HAL_TIM_PWM_Start+0x62>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2b04      	cmp	r3, #4
 8002ef6:	d108      	bne.n	8002f0a <HAL_TIM_PWM_Start+0x3a>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	223b      	movs	r2, #59	; 0x3b
 8002efc:	5c9b      	ldrb	r3, [r3, r2]
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	3b01      	subs	r3, #1
 8002f02:	1e5a      	subs	r2, r3, #1
 8002f04:	4193      	sbcs	r3, r2
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	e013      	b.n	8002f32 <HAL_TIM_PWM_Start+0x62>
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	2b08      	cmp	r3, #8
 8002f0e:	d108      	bne.n	8002f22 <HAL_TIM_PWM_Start+0x52>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	223c      	movs	r2, #60	; 0x3c
 8002f14:	5c9b      	ldrb	r3, [r3, r2]
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	1e5a      	subs	r2, r3, #1
 8002f1c:	4193      	sbcs	r3, r2
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	e007      	b.n	8002f32 <HAL_TIM_PWM_Start+0x62>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	223d      	movs	r2, #61	; 0x3d
 8002f26:	5c9b      	ldrb	r3, [r3, r2]
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	1e5a      	subs	r2, r3, #1
 8002f2e:	4193      	sbcs	r3, r2
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e04d      	b.n	8002fd6 <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d104      	bne.n	8002f4a <HAL_TIM_PWM_Start+0x7a>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	223a      	movs	r2, #58	; 0x3a
 8002f44:	2102      	movs	r1, #2
 8002f46:	5499      	strb	r1, [r3, r2]
 8002f48:	e013      	b.n	8002f72 <HAL_TIM_PWM_Start+0xa2>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b04      	cmp	r3, #4
 8002f4e:	d104      	bne.n	8002f5a <HAL_TIM_PWM_Start+0x8a>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	223b      	movs	r2, #59	; 0x3b
 8002f54:	2102      	movs	r1, #2
 8002f56:	5499      	strb	r1, [r3, r2]
 8002f58:	e00b      	b.n	8002f72 <HAL_TIM_PWM_Start+0xa2>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	d104      	bne.n	8002f6a <HAL_TIM_PWM_Start+0x9a>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	223c      	movs	r2, #60	; 0x3c
 8002f64:	2102      	movs	r1, #2
 8002f66:	5499      	strb	r1, [r3, r2]
 8002f68:	e003      	b.n	8002f72 <HAL_TIM_PWM_Start+0xa2>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	223d      	movs	r2, #61	; 0x3d
 8002f6e:	2102      	movs	r1, #2
 8002f70:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6839      	ldr	r1, [r7, #0]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	f000 fbc0 	bl	8003700 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	2380      	movs	r3, #128	; 0x80
 8002f86:	05db      	lsls	r3, r3, #23
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d009      	beq.n	8002fa0 <HAL_TIM_PWM_Start+0xd0>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a13      	ldr	r2, [pc, #76]	; (8002fe0 <HAL_TIM_PWM_Start+0x110>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d004      	beq.n	8002fa0 <HAL_TIM_PWM_Start+0xd0>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a12      	ldr	r2, [pc, #72]	; (8002fe4 <HAL_TIM_PWM_Start+0x114>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d111      	bne.n	8002fc4 <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	2207      	movs	r2, #7
 8002fa8:	4013      	ands	r3, r2
 8002faa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2b06      	cmp	r3, #6
 8002fb0:	d010      	beq.n	8002fd4 <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fc2:	e007      	b.n	8002fd4 <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2101      	movs	r1, #1
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	b004      	add	sp, #16
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	46c0      	nop			; (mov r8, r8)
 8002fe0:	40010800 	.word	0x40010800
 8002fe4:	40011400 	.word	0x40011400

08002fe8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ff4:	2317      	movs	r3, #23
 8002ff6:	18fb      	adds	r3, r7, r3
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2238      	movs	r2, #56	; 0x38
 8003000:	5c9b      	ldrb	r3, [r3, r2]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d101      	bne.n	800300a <HAL_TIM_PWM_ConfigChannel+0x22>
 8003006:	2302      	movs	r3, #2
 8003008:	e0ad      	b.n	8003166 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2238      	movs	r2, #56	; 0x38
 800300e:	2101      	movs	r1, #1
 8003010:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b0c      	cmp	r3, #12
 8003016:	d100      	bne.n	800301a <HAL_TIM_PWM_ConfigChannel+0x32>
 8003018:	e076      	b.n	8003108 <HAL_TIM_PWM_ConfigChannel+0x120>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b0c      	cmp	r3, #12
 800301e:	d900      	bls.n	8003022 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003020:	e095      	b.n	800314e <HAL_TIM_PWM_ConfigChannel+0x166>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2b08      	cmp	r3, #8
 8003026:	d04e      	beq.n	80030c6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b08      	cmp	r3, #8
 800302c:	d900      	bls.n	8003030 <HAL_TIM_PWM_ConfigChannel+0x48>
 800302e:	e08e      	b.n	800314e <HAL_TIM_PWM_ConfigChannel+0x166>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <HAL_TIM_PWM_ConfigChannel+0x56>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2b04      	cmp	r3, #4
 800303a:	d021      	beq.n	8003080 <HAL_TIM_PWM_ConfigChannel+0x98>
 800303c:	e087      	b.n	800314e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	0011      	movs	r1, r2
 8003046:	0018      	movs	r0, r3
 8003048:	f000 f9bc 	bl	80033c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	699a      	ldr	r2, [r3, #24]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2108      	movs	r1, #8
 8003058:	430a      	orrs	r2, r1
 800305a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699a      	ldr	r2, [r3, #24]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2104      	movs	r1, #4
 8003068:	438a      	bics	r2, r1
 800306a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6999      	ldr	r1, [r3, #24]
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	68da      	ldr	r2, [r3, #12]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	619a      	str	r2, [r3, #24]
      break;
 800307e:	e06b      	b.n	8003158 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68ba      	ldr	r2, [r7, #8]
 8003086:	0011      	movs	r1, r2
 8003088:	0018      	movs	r0, r3
 800308a:	f000 f9d7 	bl	800343c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	699a      	ldr	r2, [r3, #24]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2180      	movs	r1, #128	; 0x80
 800309a:	0109      	lsls	r1, r1, #4
 800309c:	430a      	orrs	r2, r1
 800309e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	699a      	ldr	r2, [r3, #24]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4931      	ldr	r1, [pc, #196]	; (8003170 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80030ac:	400a      	ands	r2, r1
 80030ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6999      	ldr	r1, [r3, #24]
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	021a      	lsls	r2, r3, #8
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	619a      	str	r2, [r3, #24]
      break;
 80030c4:	e048      	b.n	8003158 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	0011      	movs	r1, r2
 80030ce:	0018      	movs	r0, r3
 80030d0:	f000 f9f6 	bl	80034c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	69da      	ldr	r2, [r3, #28]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2108      	movs	r1, #8
 80030e0:	430a      	orrs	r2, r1
 80030e2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	69da      	ldr	r2, [r3, #28]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2104      	movs	r1, #4
 80030f0:	438a      	bics	r2, r1
 80030f2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	69d9      	ldr	r1, [r3, #28]
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	61da      	str	r2, [r3, #28]
      break;
 8003106:	e027      	b.n	8003158 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68ba      	ldr	r2, [r7, #8]
 800310e:	0011      	movs	r1, r2
 8003110:	0018      	movs	r0, r3
 8003112:	f000 fa15 	bl	8003540 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	69da      	ldr	r2, [r3, #28]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2180      	movs	r1, #128	; 0x80
 8003122:	0109      	lsls	r1, r1, #4
 8003124:	430a      	orrs	r2, r1
 8003126:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	69da      	ldr	r2, [r3, #28]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	490f      	ldr	r1, [pc, #60]	; (8003170 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003134:	400a      	ands	r2, r1
 8003136:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	69d9      	ldr	r1, [r3, #28]
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	021a      	lsls	r2, r3, #8
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	61da      	str	r2, [r3, #28]
      break;
 800314c:	e004      	b.n	8003158 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800314e:	2317      	movs	r3, #23
 8003150:	18fb      	adds	r3, r7, r3
 8003152:	2201      	movs	r2, #1
 8003154:	701a      	strb	r2, [r3, #0]
      break;
 8003156:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2238      	movs	r2, #56	; 0x38
 800315c:	2100      	movs	r1, #0
 800315e:	5499      	strb	r1, [r3, r2]

  return status;
 8003160:	2317      	movs	r3, #23
 8003162:	18fb      	adds	r3, r7, r3
 8003164:	781b      	ldrb	r3, [r3, #0]
}
 8003166:	0018      	movs	r0, r3
 8003168:	46bd      	mov	sp, r7
 800316a:	b006      	add	sp, #24
 800316c:	bd80      	pop	{r7, pc}
 800316e:	46c0      	nop			; (mov r8, r8)
 8003170:	fffffbff 	.word	0xfffffbff

08003174 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800317e:	230f      	movs	r3, #15
 8003180:	18fb      	adds	r3, r7, r3
 8003182:	2200      	movs	r2, #0
 8003184:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2238      	movs	r2, #56	; 0x38
 800318a:	5c9b      	ldrb	r3, [r3, r2]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <HAL_TIM_ConfigClockSource+0x20>
 8003190:	2302      	movs	r3, #2
 8003192:	e0bc      	b.n	800330e <HAL_TIM_ConfigClockSource+0x19a>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2238      	movs	r2, #56	; 0x38
 8003198:	2101      	movs	r1, #1
 800319a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2239      	movs	r2, #57	; 0x39
 80031a0:	2102      	movs	r1, #2
 80031a2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2277      	movs	r2, #119	; 0x77
 80031b0:	4393      	bics	r3, r2
 80031b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	4a58      	ldr	r2, [pc, #352]	; (8003318 <HAL_TIM_ConfigClockSource+0x1a4>)
 80031b8:	4013      	ands	r3, r2
 80031ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2280      	movs	r2, #128	; 0x80
 80031ca:	0192      	lsls	r2, r2, #6
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d040      	beq.n	8003252 <HAL_TIM_ConfigClockSource+0xde>
 80031d0:	2280      	movs	r2, #128	; 0x80
 80031d2:	0192      	lsls	r2, r2, #6
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d900      	bls.n	80031da <HAL_TIM_ConfigClockSource+0x66>
 80031d8:	e088      	b.n	80032ec <HAL_TIM_ConfigClockSource+0x178>
 80031da:	2280      	movs	r2, #128	; 0x80
 80031dc:	0152      	lsls	r2, r2, #5
 80031de:	4293      	cmp	r3, r2
 80031e0:	d100      	bne.n	80031e4 <HAL_TIM_ConfigClockSource+0x70>
 80031e2:	e088      	b.n	80032f6 <HAL_TIM_ConfigClockSource+0x182>
 80031e4:	2280      	movs	r2, #128	; 0x80
 80031e6:	0152      	lsls	r2, r2, #5
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d900      	bls.n	80031ee <HAL_TIM_ConfigClockSource+0x7a>
 80031ec:	e07e      	b.n	80032ec <HAL_TIM_ConfigClockSource+0x178>
 80031ee:	2b70      	cmp	r3, #112	; 0x70
 80031f0:	d018      	beq.n	8003224 <HAL_TIM_ConfigClockSource+0xb0>
 80031f2:	d900      	bls.n	80031f6 <HAL_TIM_ConfigClockSource+0x82>
 80031f4:	e07a      	b.n	80032ec <HAL_TIM_ConfigClockSource+0x178>
 80031f6:	2b60      	cmp	r3, #96	; 0x60
 80031f8:	d04f      	beq.n	800329a <HAL_TIM_ConfigClockSource+0x126>
 80031fa:	d900      	bls.n	80031fe <HAL_TIM_ConfigClockSource+0x8a>
 80031fc:	e076      	b.n	80032ec <HAL_TIM_ConfigClockSource+0x178>
 80031fe:	2b50      	cmp	r3, #80	; 0x50
 8003200:	d03b      	beq.n	800327a <HAL_TIM_ConfigClockSource+0x106>
 8003202:	d900      	bls.n	8003206 <HAL_TIM_ConfigClockSource+0x92>
 8003204:	e072      	b.n	80032ec <HAL_TIM_ConfigClockSource+0x178>
 8003206:	2b40      	cmp	r3, #64	; 0x40
 8003208:	d057      	beq.n	80032ba <HAL_TIM_ConfigClockSource+0x146>
 800320a:	d900      	bls.n	800320e <HAL_TIM_ConfigClockSource+0x9a>
 800320c:	e06e      	b.n	80032ec <HAL_TIM_ConfigClockSource+0x178>
 800320e:	2b30      	cmp	r3, #48	; 0x30
 8003210:	d063      	beq.n	80032da <HAL_TIM_ConfigClockSource+0x166>
 8003212:	d86b      	bhi.n	80032ec <HAL_TIM_ConfigClockSource+0x178>
 8003214:	2b20      	cmp	r3, #32
 8003216:	d060      	beq.n	80032da <HAL_TIM_ConfigClockSource+0x166>
 8003218:	d868      	bhi.n	80032ec <HAL_TIM_ConfigClockSource+0x178>
 800321a:	2b00      	cmp	r3, #0
 800321c:	d05d      	beq.n	80032da <HAL_TIM_ConfigClockSource+0x166>
 800321e:	2b10      	cmp	r3, #16
 8003220:	d05b      	beq.n	80032da <HAL_TIM_ConfigClockSource+0x166>
 8003222:	e063      	b.n	80032ec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6818      	ldr	r0, [r3, #0]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	6899      	ldr	r1, [r3, #8]
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	f000 fa44 	bl	80036c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	2277      	movs	r2, #119	; 0x77
 8003244:	4313      	orrs	r3, r2
 8003246:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	609a      	str	r2, [r3, #8]
      break;
 8003250:	e052      	b.n	80032f8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6818      	ldr	r0, [r3, #0]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	6899      	ldr	r1, [r3, #8]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	f000 fa2d 	bl	80036c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2180      	movs	r1, #128	; 0x80
 8003272:	01c9      	lsls	r1, r1, #7
 8003274:	430a      	orrs	r2, r1
 8003276:	609a      	str	r2, [r3, #8]
      break;
 8003278:	e03e      	b.n	80032f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6818      	ldr	r0, [r3, #0]
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	6859      	ldr	r1, [r3, #4]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	001a      	movs	r2, r3
 8003288:	f000 f9a0 	bl	80035cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2150      	movs	r1, #80	; 0x50
 8003292:	0018      	movs	r0, r3
 8003294:	f000 f9fa 	bl	800368c <TIM_ITRx_SetConfig>
      break;
 8003298:	e02e      	b.n	80032f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6818      	ldr	r0, [r3, #0]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	6859      	ldr	r1, [r3, #4]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	001a      	movs	r2, r3
 80032a8:	f000 f9be 	bl	8003628 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2160      	movs	r1, #96	; 0x60
 80032b2:	0018      	movs	r0, r3
 80032b4:	f000 f9ea 	bl	800368c <TIM_ITRx_SetConfig>
      break;
 80032b8:	e01e      	b.n	80032f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6818      	ldr	r0, [r3, #0]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	6859      	ldr	r1, [r3, #4]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	001a      	movs	r2, r3
 80032c8:	f000 f980 	bl	80035cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2140      	movs	r1, #64	; 0x40
 80032d2:	0018      	movs	r0, r3
 80032d4:	f000 f9da 	bl	800368c <TIM_ITRx_SetConfig>
      break;
 80032d8:	e00e      	b.n	80032f8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	0019      	movs	r1, r3
 80032e4:	0010      	movs	r0, r2
 80032e6:	f000 f9d1 	bl	800368c <TIM_ITRx_SetConfig>
      break;
 80032ea:	e005      	b.n	80032f8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80032ec:	230f      	movs	r3, #15
 80032ee:	18fb      	adds	r3, r7, r3
 80032f0:	2201      	movs	r2, #1
 80032f2:	701a      	strb	r2, [r3, #0]
      break;
 80032f4:	e000      	b.n	80032f8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80032f6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2239      	movs	r2, #57	; 0x39
 80032fc:	2101      	movs	r1, #1
 80032fe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2238      	movs	r2, #56	; 0x38
 8003304:	2100      	movs	r1, #0
 8003306:	5499      	strb	r1, [r3, r2]

  return status;
 8003308:	230f      	movs	r3, #15
 800330a:	18fb      	adds	r3, r7, r3
 800330c:	781b      	ldrb	r3, [r3, #0]
}
 800330e:	0018      	movs	r0, r3
 8003310:	46bd      	mov	sp, r7
 8003312:	b004      	add	sp, #16
 8003314:	bd80      	pop	{r7, pc}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	ffff00ff 	.word	0xffff00ff

0800331c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	2380      	movs	r3, #128	; 0x80
 8003330:	05db      	lsls	r3, r3, #23
 8003332:	429a      	cmp	r2, r3
 8003334:	d007      	beq.n	8003346 <TIM_Base_SetConfig+0x2a>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a1f      	ldr	r2, [pc, #124]	; (80033b8 <TIM_Base_SetConfig+0x9c>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d003      	beq.n	8003346 <TIM_Base_SetConfig+0x2a>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a1e      	ldr	r2, [pc, #120]	; (80033bc <TIM_Base_SetConfig+0xa0>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d108      	bne.n	8003358 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2270      	movs	r2, #112	; 0x70
 800334a:	4393      	bics	r3, r2
 800334c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	4313      	orrs	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	2380      	movs	r3, #128	; 0x80
 800335c:	05db      	lsls	r3, r3, #23
 800335e:	429a      	cmp	r2, r3
 8003360:	d007      	beq.n	8003372 <TIM_Base_SetConfig+0x56>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a14      	ldr	r2, [pc, #80]	; (80033b8 <TIM_Base_SetConfig+0x9c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d003      	beq.n	8003372 <TIM_Base_SetConfig+0x56>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a13      	ldr	r2, [pc, #76]	; (80033bc <TIM_Base_SetConfig+0xa0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d108      	bne.n	8003384 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	4a12      	ldr	r2, [pc, #72]	; (80033c0 <TIM_Base_SetConfig+0xa4>)
 8003376:	4013      	ands	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	4313      	orrs	r3, r2
 8003382:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2280      	movs	r2, #128	; 0x80
 8003388:	4393      	bics	r3, r2
 800338a:	001a      	movs	r2, r3
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	4313      	orrs	r3, r2
 8003392:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	615a      	str	r2, [r3, #20]
}
 80033b0:	46c0      	nop			; (mov r8, r8)
 80033b2:	46bd      	mov	sp, r7
 80033b4:	b004      	add	sp, #16
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40010800 	.word	0x40010800
 80033bc:	40011400 	.word	0x40011400
 80033c0:	fffffcff 	.word	0xfffffcff

080033c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	2201      	movs	r2, #1
 80033d4:	4393      	bics	r3, r2
 80033d6:	001a      	movs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2270      	movs	r2, #112	; 0x70
 80033f2:	4393      	bics	r3, r2
 80033f4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2203      	movs	r2, #3
 80033fa:	4393      	bics	r3, r2
 80033fc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	4313      	orrs	r3, r2
 8003406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	2202      	movs	r2, #2
 800340c:	4393      	bics	r3, r2
 800340e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	4313      	orrs	r3, r2
 8003418:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	621a      	str	r2, [r3, #32]
}
 8003434:	46c0      	nop			; (mov r8, r8)
 8003436:	46bd      	mov	sp, r7
 8003438:	b006      	add	sp, #24
 800343a:	bd80      	pop	{r7, pc}

0800343c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	2210      	movs	r2, #16
 800344c:	4393      	bics	r3, r2
 800344e:	001a      	movs	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	4a13      	ldr	r2, [pc, #76]	; (80034b8 <TIM_OC2_SetConfig+0x7c>)
 800346a:	4013      	ands	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	4a12      	ldr	r2, [pc, #72]	; (80034bc <TIM_OC2_SetConfig+0x80>)
 8003472:	4013      	ands	r3, r2
 8003474:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	021b      	lsls	r3, r3, #8
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	4313      	orrs	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	2220      	movs	r2, #32
 8003486:	4393      	bics	r3, r2
 8003488:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	4313      	orrs	r3, r2
 8003494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	621a      	str	r2, [r3, #32]
}
 80034b0:	46c0      	nop			; (mov r8, r8)
 80034b2:	46bd      	mov	sp, r7
 80034b4:	b006      	add	sp, #24
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	ffff8fff 	.word	0xffff8fff
 80034bc:	fffffcff 	.word	0xfffffcff

080034c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	4a1a      	ldr	r2, [pc, #104]	; (8003538 <TIM_OC3_SetConfig+0x78>)
 80034d0:	401a      	ands	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2270      	movs	r2, #112	; 0x70
 80034ec:	4393      	bics	r3, r2
 80034ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2203      	movs	r2, #3
 80034f4:	4393      	bics	r3, r2
 80034f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	4313      	orrs	r3, r2
 8003500:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	4a0d      	ldr	r2, [pc, #52]	; (800353c <TIM_OC3_SetConfig+0x7c>)
 8003506:	4013      	ands	r3, r2
 8003508:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	021b      	lsls	r3, r3, #8
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	4313      	orrs	r3, r2
 8003514:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	621a      	str	r2, [r3, #32]
}
 8003530:	46c0      	nop			; (mov r8, r8)
 8003532:	46bd      	mov	sp, r7
 8003534:	b006      	add	sp, #24
 8003536:	bd80      	pop	{r7, pc}
 8003538:	fffffeff 	.word	0xfffffeff
 800353c:	fffffdff 	.word	0xfffffdff

08003540 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	4a1b      	ldr	r2, [pc, #108]	; (80035bc <TIM_OC4_SetConfig+0x7c>)
 8003550:	401a      	ands	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4a15      	ldr	r2, [pc, #84]	; (80035c0 <TIM_OC4_SetConfig+0x80>)
 800356c:	4013      	ands	r3, r2
 800356e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	4a14      	ldr	r2, [pc, #80]	; (80035c4 <TIM_OC4_SetConfig+0x84>)
 8003574:	4013      	ands	r3, r2
 8003576:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	021b      	lsls	r3, r3, #8
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	4313      	orrs	r3, r2
 8003582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	4a10      	ldr	r2, [pc, #64]	; (80035c8 <TIM_OC4_SetConfig+0x88>)
 8003588:	4013      	ands	r3, r2
 800358a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	031b      	lsls	r3, r3, #12
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	4313      	orrs	r3, r2
 8003596:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	621a      	str	r2, [r3, #32]
}
 80035b2:	46c0      	nop			; (mov r8, r8)
 80035b4:	46bd      	mov	sp, r7
 80035b6:	b006      	add	sp, #24
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	46c0      	nop			; (mov r8, r8)
 80035bc:	ffffefff 	.word	0xffffefff
 80035c0:	ffff8fff 	.word	0xffff8fff
 80035c4:	fffffcff 	.word	0xfffffcff
 80035c8:	ffffdfff 	.word	0xffffdfff

080035cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	2201      	movs	r2, #1
 80035e4:	4393      	bics	r3, r2
 80035e6:	001a      	movs	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	22f0      	movs	r2, #240	; 0xf0
 80035f6:	4393      	bics	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	011b      	lsls	r3, r3, #4
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	4313      	orrs	r3, r2
 8003602:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	220a      	movs	r2, #10
 8003608:	4393      	bics	r3, r2
 800360a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	4313      	orrs	r3, r2
 8003612:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	621a      	str	r2, [r3, #32]
}
 8003620:	46c0      	nop			; (mov r8, r8)
 8003622:	46bd      	mov	sp, r7
 8003624:	b006      	add	sp, #24
 8003626:	bd80      	pop	{r7, pc}

08003628 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	2210      	movs	r2, #16
 800363a:	4393      	bics	r3, r2
 800363c:	001a      	movs	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	4a0d      	ldr	r2, [pc, #52]	; (8003688 <TIM_TI2_ConfigInputStage+0x60>)
 8003652:	4013      	ands	r3, r2
 8003654:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	031b      	lsls	r3, r3, #12
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	4313      	orrs	r3, r2
 800365e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	22a0      	movs	r2, #160	; 0xa0
 8003664:	4393      	bics	r3, r2
 8003666:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	4313      	orrs	r3, r2
 8003670:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	621a      	str	r2, [r3, #32]
}
 800367e:	46c0      	nop			; (mov r8, r8)
 8003680:	46bd      	mov	sp, r7
 8003682:	b006      	add	sp, #24
 8003684:	bd80      	pop	{r7, pc}
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	ffff0fff 	.word	0xffff0fff

0800368c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2270      	movs	r2, #112	; 0x70
 80036a0:	4393      	bics	r3, r2
 80036a2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	2207      	movs	r2, #7
 80036ac:	4313      	orrs	r3, r2
 80036ae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	609a      	str	r2, [r3, #8]
}
 80036b6:	46c0      	nop			; (mov r8, r8)
 80036b8:	46bd      	mov	sp, r7
 80036ba:	b004      	add	sp, #16
 80036bc:	bd80      	pop	{r7, pc}
	...

080036c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
 80036cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	4a09      	ldr	r2, [pc, #36]	; (80036fc <TIM_ETR_SetConfig+0x3c>)
 80036d8:	4013      	ands	r3, r2
 80036da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	021a      	lsls	r2, r3, #8
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	431a      	orrs	r2, r3
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	609a      	str	r2, [r3, #8]
}
 80036f4:	46c0      	nop			; (mov r8, r8)
 80036f6:	46bd      	mov	sp, r7
 80036f8:	b006      	add	sp, #24
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	ffff00ff 	.word	0xffff00ff

08003700 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	221f      	movs	r2, #31
 8003710:	4013      	ands	r3, r2
 8003712:	2201      	movs	r2, #1
 8003714:	409a      	lsls	r2, r3
 8003716:	0013      	movs	r3, r2
 8003718:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	43d2      	mvns	r2, r2
 8003722:	401a      	ands	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6a1a      	ldr	r2, [r3, #32]
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	211f      	movs	r1, #31
 8003730:	400b      	ands	r3, r1
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	4099      	lsls	r1, r3
 8003736:	000b      	movs	r3, r1
 8003738:	431a      	orrs	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	621a      	str	r2, [r3, #32]
}
 800373e:	46c0      	nop			; (mov r8, r8)
 8003740:	46bd      	mov	sp, r7
 8003742:	b006      	add	sp, #24
 8003744:	bd80      	pop	{r7, pc}
	...

08003748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2238      	movs	r2, #56	; 0x38
 8003756:	5c9b      	ldrb	r3, [r3, r2]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d101      	bne.n	8003760 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800375c:	2302      	movs	r3, #2
 800375e:	e042      	b.n	80037e6 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2238      	movs	r2, #56	; 0x38
 8003764:	2101      	movs	r1, #1
 8003766:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2239      	movs	r2, #57	; 0x39
 800376c:	2102      	movs	r1, #2
 800376e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2270      	movs	r2, #112	; 0x70
 8003784:	4393      	bics	r3, r2
 8003786:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	4313      	orrs	r3, r2
 8003790:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	2380      	movs	r3, #128	; 0x80
 80037a0:	05db      	lsls	r3, r3, #23
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d009      	beq.n	80037ba <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a11      	ldr	r2, [pc, #68]	; (80037f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d004      	beq.n	80037ba <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a0f      	ldr	r2, [pc, #60]	; (80037f4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d10c      	bne.n	80037d4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	2280      	movs	r2, #128	; 0x80
 80037be:	4393      	bics	r3, r2
 80037c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2239      	movs	r2, #57	; 0x39
 80037d8:	2101      	movs	r1, #1
 80037da:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2238      	movs	r2, #56	; 0x38
 80037e0:	2100      	movs	r1, #0
 80037e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	0018      	movs	r0, r3
 80037e8:	46bd      	mov	sp, r7
 80037ea:	b004      	add	sp, #16
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	46c0      	nop			; (mov r8, r8)
 80037f0:	40010800 	.word	0x40010800
 80037f4:	40011400 	.word	0x40011400

080037f8 <__libc_init_array>:
 80037f8:	b570      	push	{r4, r5, r6, lr}
 80037fa:	2600      	movs	r6, #0
 80037fc:	4d0c      	ldr	r5, [pc, #48]	; (8003830 <__libc_init_array+0x38>)
 80037fe:	4c0d      	ldr	r4, [pc, #52]	; (8003834 <__libc_init_array+0x3c>)
 8003800:	1b64      	subs	r4, r4, r5
 8003802:	10a4      	asrs	r4, r4, #2
 8003804:	42a6      	cmp	r6, r4
 8003806:	d109      	bne.n	800381c <__libc_init_array+0x24>
 8003808:	2600      	movs	r6, #0
 800380a:	f000 f821 	bl	8003850 <_init>
 800380e:	4d0a      	ldr	r5, [pc, #40]	; (8003838 <__libc_init_array+0x40>)
 8003810:	4c0a      	ldr	r4, [pc, #40]	; (800383c <__libc_init_array+0x44>)
 8003812:	1b64      	subs	r4, r4, r5
 8003814:	10a4      	asrs	r4, r4, #2
 8003816:	42a6      	cmp	r6, r4
 8003818:	d105      	bne.n	8003826 <__libc_init_array+0x2e>
 800381a:	bd70      	pop	{r4, r5, r6, pc}
 800381c:	00b3      	lsls	r3, r6, #2
 800381e:	58eb      	ldr	r3, [r5, r3]
 8003820:	4798      	blx	r3
 8003822:	3601      	adds	r6, #1
 8003824:	e7ee      	b.n	8003804 <__libc_init_array+0xc>
 8003826:	00b3      	lsls	r3, r6, #2
 8003828:	58eb      	ldr	r3, [r5, r3]
 800382a:	4798      	blx	r3
 800382c:	3601      	adds	r6, #1
 800382e:	e7f2      	b.n	8003816 <__libc_init_array+0x1e>
 8003830:	08005380 	.word	0x08005380
 8003834:	08005380 	.word	0x08005380
 8003838:	08005380 	.word	0x08005380
 800383c:	08005384 	.word	0x08005384

08003840 <memset>:
 8003840:	0003      	movs	r3, r0
 8003842:	1882      	adds	r2, r0, r2
 8003844:	4293      	cmp	r3, r2
 8003846:	d100      	bne.n	800384a <memset+0xa>
 8003848:	4770      	bx	lr
 800384a:	7019      	strb	r1, [r3, #0]
 800384c:	3301      	adds	r3, #1
 800384e:	e7f9      	b.n	8003844 <memset+0x4>

08003850 <_init>:
 8003850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003852:	46c0      	nop			; (mov r8, r8)
 8003854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003856:	bc08      	pop	{r3}
 8003858:	469e      	mov	lr, r3
 800385a:	4770      	bx	lr

0800385c <_fini>:
 800385c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385e:	46c0      	nop			; (mov r8, r8)
 8003860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003862:	bc08      	pop	{r3}
 8003864:	469e      	mov	lr, r3
 8003866:	4770      	bx	lr
